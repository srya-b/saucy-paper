type session[a] = SID of String ^ a ;
type commsid = 1;

type Ip2f = Commit of Bit | Open ;
type If2p = Commit | Open of Bit ;

let z2pn = 1;
let p2zn = 0;

let Ip2fn = 0;
let If2pn = 0;

(*type z2p = Commit of Bit ;
type p2z = Open of Bit ; 			these should just be Ip2f and Ip2p *)

type Ia2f = 1 ;
type If2a = 1 ;

let Ip2fn = 0;	(* F_com requires no import because constant work *)
let If2pn = 0;	(* F_com can't give import it doesn't have *)
let Ia2fn = 0;	(* A has no interface to F_com *)
let Ia2pn = 0;	(* Ps require no import given ==> so a gives no import *)


(* F_com session types *)
stype sender = +{commit : bit ^ s_committed}
stype s_committed = +{open : s_opened}
stype s_opened = 1
stype receiver = &{commit : r_committed}
stype r_committed = &{open : bit -> r_opened}
stype r_opened = 1

proc F_com[K] :
  (k: Int), (rng: [Bit]), (s: session[1]),
  ($S: sender), ($R: receiver) ($adv: 1)  |- ($ch: 1) =
{
  case $S (
    commit => b = recv $S ;
              get {0} $S ;
              $R.commit ;
              case $S (
                open => get {0} $S ;
                        $R.open ;
                        send $R b ;
                        pay {0} $R ;
              )
  )
}

proc fwrapper_com[K][K1] :
  (k: Int), (rng: [Bit]), (sid: session[1]),
  (#pw_to_f: comm[K][Ip2f]{Ip2fn}), (#f_to_pw: comm[K][If2p]{If2pn}),
  (#a_to_f: comm[K][Ia2f]{a2fn}), (#f_to_a: comm[K][If2a]{0}),
	($l1: list[pid ^ sender]), ($l2: list[pid ^ s_committed]), ($l3: list[pid ^ s_opened]),
	($l4: list[pid ^ receiver]), ($l5: list[pid ^ r_committed]), ($l6: list[pid ^ r_opened])
			|- ($fw: 1) =
{
	$p2f <- acquire #pw_to_f ;
	$p2f.recv ;
	case $p2f (
		yes =>	pid = recv $p2f ;
						msg = recv $p2f ;
            get {p2fn} $p2f ;
				    case $msg (
							Commit(b) =>	$ch_ = get_channel_by_pid pid $l1 $l2 $l3 $l4 ... ;
														$ch.commit ;
                            withdrawtoken K K1 p2fn ; 
														send $ch b ;
                            pay {p2fn: K1} $ch ;
														$l2' <- append $ch_ $l2 ;
														$fw <- fwrapper_f2p_1[K][K1][p2f][f2p] <- #pw_to_f #f_to_pw $l1 $l2' ... ;
							Open =>	$ch_ = get_channel_by_pid $l1 $l2 $l3 $l54 ... ;
											$ch.open ;
                      withdrawtoken K K1 p2fn ;
                      pay {p2fn: K1} $ch ;
											$l3' <- append $ch_ $l3 ;
											$fw <- fwrapper_f2p_1[K][K1][p2f][f2p] <- #pw_to_f #f_to_pw $l1 $l2 $l3' ... ;
						)
		no =>	$fw <- fwrapper_f2p_1[K][K1][p2f][f2p] <- #pw_to_f #f_to_pw $l1 $l2 ... ;
	)
}


(* Need a per-channel f2p reader, example for just the receiver channel *)
(* this would be a per pid process rather than taking into account the channel type? *)
proc fwrapper_f2p_1[K][K1] :
	(k: int), (rng: [Bit]), (sid: session[1]),
	(#pw_to_f; comm[K][p2fmsg[Ip2f]]), (#f_to_pw: com[K][f2pmsg[If2p]]),
  (#a_to_f: comm[K][Ia2f]{a2fn}), (#f_to_a: comm[K][If2a]{0}),
	($l1: list[pid ^ sender]), ($l2: list[pid ^ s_committed]), ($l3: list[pid ^ s_opened]),
	($l4: list[pid ^ receiver]), ($l5: list[pid ^ r_committed]), ($l6: list[pid ^ r_opened])
			|- ($fw: 1) =
{
	$ch_ <- get_channel_by_pid 2 $l1 $l2 $l3 ... ;
	case $ch_ (
		commit =>	$f2p <- acquire #f_to_pw ;
							send $f2p 2 ;
							send $f2p Committed ;
              pay {f2pn: K} $f2p ;
							$l5' <- append $ch_ $l5 ;	
							$fw <- fwrapper_f2p_2[K][p2f][f2p] <- #pw_to_f #f_to_pw $l1 $l2 ... ;
		open =>	b = recv $ch_ ;
						$f2p <- acquire #f_to_pw ;
						send $f2p <- 2 ;
						send $f2p <- Open(b) ;
            pay {f2pn: K} $f2p ;
						$l6' <- append $ch_ $l6 ;
						$fw <- fwrapper_f2p_2[K][p2f][f2p] <- #pw_to_f #f_to_pw $l1 $l2 ... ;
	)	
}


type Ip2f = Commit of Bit | Open ;
type If2p = Commit | Open of Bit ;


proc protocol_wrapper[K][K1] :
  (k: int), (rng: [Bit]), (sid: session[1]),
  (#z_to_pw: comm[K][z2pmsg[Iz2p]]{Ip2fn}), (#pw_to_z: comm[K][p2zmsg[Ip2z]]{Ip2zn}),
  (#f_to_pw: comm[K][f2pmsg[If2p]]{If2pn}), (#pw_to_f: comm[K][p2fmsg[Ip2f]]{Ip2fn}),
  (#a_to_pw: comm[K][a2pmsg[Ia2p]]{Ia2pn}), (#pw_to_a: comm[K][p2amsg[Ip2a]]{Ip2an}),
  ($clist: list[pid])
    |- ($D: 1) =
{
  $z2p <- acquire #z_to_pw ;
  $z2p.recv ;
  case $z2p (
    Yes => 
      pid = recv $z2p ;
      msg = recv $z2p ;
      get {z2pn+1} $z2p ;
      if pid in clist: (* raise error *)
      case msg (
        Commit(b) => 
          m = P2F( pid, Commit(b) )
          $p2f <- acquire #pw_to_f ;
          send $p2f m
          pay {p2fn+1} $p2f ;
          #pw_to_f <- release $p2f ;
          $D <- protocolwrapper_1[K][K1]
        Open =>
          m = P2F( pid, Open )
          $p2f <- acquire #pw_to_f ;
          send $p2f m
          pay {p2fn+1} $p2f ;
          #pw_to_f <- release $p2f ;
          $D <- protocolwrapper_1[K][K1] 
  )
}

