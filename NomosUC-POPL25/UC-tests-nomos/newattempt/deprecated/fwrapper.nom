stype sender = +{commit: bit ^ s_committed}
stype s_committed = +{open: s_opened}
stype s_opened = 1 
stype receiver = &{commit: r_committed}
stype r_committed = &{open : bit -> r_opened}
stype r_opened = 1

type sid[a] = SID of string ^ a ;
type commsid = 1 

proc F_com[K][a] : 
	(k: int), (r: [Bit]), (sid: SID[commsid]), ($s: sender), ($r: receiver)  |-  ($fc: 1) =
{
	case S (
		commit =>	b = recv S ;
							R.commit ;
							case S (
								open =>	R.open ;
												send R b ;
}


(* 
 F_wrapper gets functional messages from parties and sends them to the right channel of the
 functionality through a session type 
*)

proc sender_init[K] :
	(k: int), (rng: [Bit]), (sid: session[1]) |- ($ch: sender) =
{

}

proc fwrapper_init[K][p2f][f2] :
	(k: int), (rng: [Bit]), (sid: SID[commsid]), 
	(#pw_to_f: comm[K][p2f]), (#f_to_pw: comm[K][f2p]) |- ($fw: 1) =
{
	(* create the lsts and spawn F_com with the channel for S and R *)
	(* put channel for sender (pid=1) and receiver (pid=2) into lists*)
	(* TODO: some way to require pids or enforce that committer = 1 and receiver = 2 *)
}

type p2fmsg[a] = P2F of pid ^ a
type f2pmsg[a] = F2P of pid ^ a

type a2fmsg[a] = A2F of a
type f2amsg[a] = F2A of a

type comp2f = Commit of Bit | Open ;
type comf2p = Committed | Open of Bit ;

proc fwrapper_p2f[K][p2f][f2p]
	(k: int), (rng: [Bit]), (sid: SID),
	(#pw_to_f; comm[K][p2fmsg[p2f]]), (#f_to_pw: com[K][f2pmsg[f2p]]),
	($l1: list[pid ^ sender]), ($l2: list[pid ^ s_committed]), ($l3: list[pid ^ s_opened]),
	($l4: list[pid ^ receiver]), ($l5: list[pid ^ r_committed]), ($l6: list[pid ^ r_opened])
			|- ($fw: 1) =
{ 
	$p2f <- acquire #pw_to_f ;
	$p2f.recv ;
	case $p2f (
		yes =>	pid = recv $p2f ;
						msg = recv $p2f ;
				    case $msg (
							Commit(b) =>	$ch_ = get_channel_by_pid pid $l1 $l2 $l3 $l4 ... ;
														$ch.commit ;
														send $ch b ;
														$l2' <- append $ch_ $l2 ;
														$fw <- fwrapper_f2p_1[K][p2f][f2p] <- #pw_to_f #f_to_pw $l1 $l2' ... ;
							Open =>	$ch_ = get_channel_by_pid $l1 $l2 $l3 $l54 ... ;
											$ch.open ;
											$l3' <- append $ch_ $l3 ;
											$fw <- fwrapper_f2p_1[K][p2f][f2p] <- #pw_to_f #f_to_pw $l1 $l2 $l3' ... ;
						)
		no =>	$fw <- fwrapper_f2p_1[K][p2f][f2p] <- #pw_to_f #f_to_pw $l1 $l2 ... ;
	)
}

(* Need a per-channel f2p reader, example for just the receiver channel *)
(* this would be a per pid process rather than taking into account the channel type? *)
proc fwrapper_f2p_1[K][p2f][f2p] :
	(k: int), (rng: [Bit]), (sid: SID),
	(#pw_to_f; comm[K][p2fmsg[p2f]]), (#f_to_pw: com[K][f2pmsg[f2p]]),
	($l1: list[pid ^ sender]), ($l2: list[pid ^ s_committed]), ($l3: list[pid ^ s_opened]),
	($l4: list[pid ^ receiver]), ($l5: list[pid ^ r_committed]), ($l6: list[pid ^ r_opened])
			|- ($fw: 1) =
{
	$ch_ <- get_channel_by_pid 2 $l1 $l2 $l3 ... ;
	case $ch_ (
		commit =>	$f2p <- acquire #f_to_pw ;
							send $f2p 2 ;
							send $f2p Committed ;
							$l5' <- append $ch_ $l5 ;	
							$fw <- fwrapper_f2p_2[K][p2f][f2p] <- #pw_to_f #f_to_pw $l1 $l2 ... ;
		open =>	b = recv $ch_ ;
						$f2p <- acquire #f_to_pw ;
						send $f2p <- 2 ;
						send $f2p <- Open(b) ;
						$l6' <- append $ch_ $l6 ;
						$fw <- fwrapper_f2p_2[K][p2f][f2p] <- #pw_to_f #f_to_pw $l1 $l2 ... ;
	)	
}

stype party[a] = &{ hash: pid ^ int -> hashing[a],
								 sendmsg: pid ^ pid ^ a -> sending[a] }
stype hashing[a] = +{ shash: pid ^ int -> party[a] }
stype sending[a] = +{ msg: pid ^ pid ^ a -> party[a] }

stype advhash = &{ hash: int -> +{hash: int -> advhash}}

proc F_ro[K] :
	(k: Int), (rnd: [Bit]), (s: sid),
	($p2f: party[a]), ($a2f: advhash)   |- ($ch: 1) = 
{
	case $p2f (
		hash =>	pid = recv $p2f ;
						p = recv $p2f ;
						if exists p table
						then
							h <- gethash table p ;
						else
							h <- sample k r ;
							(* store in a mapping, not sure how to do that *)
						end
						$p2f.shash ;
						send $p2f h ;
						$ch <- F_ro_a2f <- k rng s $p2f $a2f
		sendint =>	pid = recv $p2f ;
								rpid = recv $p2f ;
								msg = recv $p2f ;
								$p2f.msg ;
								send $p2f rpid ;
								send $p2f msg ;
								$ch <- F_ro_a2f <- k rng s $p2f $a2f
}

proc F_ro_a2f[K]:
	(k: Int), (rng: [Bit]), (s: sid),
	($p2f: party[a]), ($a2f: advhash)  |- ($ch: 1) =
{
	case $a2f (
		hash =>	p = recv $a2f ;
						if exists p table
						then
							h <- gethash table p ;
						else
							h <- sample k r ;
							(* store in a mapping, not sure how to do that *)
						end
						$a2f.shash ;
						send $a2f h ;
						$ch <- F_ro <- k rng s $p2f $a2f
	)
}


