stype A = +{one: +{two: &{ three1: A,
													 three2: +{four : A}}}}
stype B = +{a: &{b1 : B,
							   b2: &{c: B}}}

proc test_proc[K,K1] : . |- ($c: 1) =
{
	#c1 <- channel_init[A]
	#c2 <- channel_init[B]

	$p <- prot_P[K,K1] <- #c1 #c2
	$q <- prot_Q[K,K1] <- #c2 #c1
}

(* expanded version *)
type tau_A_toQ = One | Two | Four 
type tau_A_toP = Three1 | Three2
type tau_B_toP = A 
type tau_B_toQ = B1 | B2 | C

type tau_toQ = One | Two | Four | B1 | B2 | C
type tau_toP = Three1 | Three2 | A 



proc test_proc[K,K1] : . |- ($c: 1) =
{
	#c1_ptoq <- comm[tau_toP] <- ;
	#c2_qtop <- comm[tau_toQ] <- ;

	$p <- wrapped_P[K,K1] <- #c1_ptoq #c2_qtop
	$q <- wrapped_Q[K,K1} <- #c2_qtop #c1_ptoq
}

proc wrapped_P[K,K1] :
	(#c1: comm[tau_toQ]), (#c2: comm[tau_toP]) |- ($c: 1) =
{
	(* spawn dummy processes generated in module D *)
	$forP <- D.ptoQ <- #c1
	$fromQ <- D.pfromq <- #c2

	$c <- the_real_P <- $fromP $fromQ
}

proc ptoQ[K,K1] :
  (#c1: comm[tau_toQ]) |- ($c: 
