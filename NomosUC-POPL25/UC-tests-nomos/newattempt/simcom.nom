type comp2f[a] = Commit of Bit | Open | Send of a ;
type comf2p[a] = Commit | Open of Bit | Recv of a ;
type z2a[a][b] = Z2A2P of pid ^ a | Z2A2F of b ;
type a2z[a][b] = P2A2Z of pid ^ a  F2A2Z of b ;

type Rop2f[a] = QHash of Int | Send of pid ^ a | Recv ;
type Rof2p[a] = RHash of Int | Yes of pid ^ a  | No ;

type Roa2f = QHash of Int ;
type Rof2a = RHash of Int ;


stype z2a[a][b]{n} = +{ |{n}> Z2A2P: PID * a * z2a[a][b], |{n}> Z2A2F: b * z2a[a][b] }
stype a2z[a][b]{n} = &{ P2A2Z: PID -> a -> a2z[a][b], F2A2Z: b -> a2z[a][b] }
stype a2p[a]{n} = &{ A2P: PID -> a -> a2p[a]}
stype p2a[a]{n} = +{ P2A: PID * a * p2a[a] }
stype a2f[a]{n} = &{ A2F: a -> a2f[a] }
stype f2a[a]{n} = +{ F2A: a * f2a[a] }

proc sim_com[K][K1] :
  (k: Int), (rng: [Bit]), (sid: SID[comsid]),
  ($z2a: Z2A[K][rop2f[Either a commsg]][roa2f]{1}), ($a2z: A2Z[rof2p[ Either a commsg]][rof2a]{1}),
  ($p2a: P2A[K][ComF2P[a]]{2}), ($a2p: A2P[ComP2F[a]]{1}), 
  ($f2a: F2A[ComF2A]{1}), ($a2f: A2F[ComA2F]{1]) |- ($ch: 1) =
{
  -- create F_ro
  l <- list[(bit,nonce), Int]
  $s2ro, $ro2s <- chan_init[K1][rop2f[Either a commsg]][rof2p[Either a commsg]]
                               [RoP2F[Either a commsg]][RoF2P[Either a commsg]] 

  $ro <- F_ro <- k rng sid $ro2s l

  let Sid(pidS, pidR)) = sid
  if pid == pidS then
    $c <- sim_com_sender[K][K1] <- k rng sid $z2a $a2z $p2a $a2p $f2a $a2f $ro l Nothing
  else if pid == pidR then
    $c <- sim_com_receiver[K][K1] <- k rng sid $z2a $a2z $p2a $a2p $f2a $a2f $ro l Nothing
  else -- if non corrupt wait until real world commits and wait to deliver
}

-- crupt sender we have to ensure the ideal world commits to the same bit
-- watch for Z queries 
-- if the hash commitment isn't in F_ro flip a bit and guess
proc sim_com_sender[K][K1] :
  (k: Int), (rng: [Bit]), (sid: session[1]),
  ($z2a: z2a[K][rop2f[commsg[a]]][roa2f[commsg[a]]]{2}), ($a2z: a2z[K][comf2p][rof2a]{0}),
  ($p2a: p2a[K][comf2p[commmsg[a]]]{1}), ($a2p: a2p[K][comp2f[commmsg[a]]]{1}),
  ($f2a: f2a[K][comf2a[commsg[a]]]{0}), ($a2f: a2f[K][coma2f[commsg[a]]]{1}),
  ($s2ro: a2f[K1][roa2f]{0}{0}), (l: [((Bit,Int),Int)), (comh: Maybe Int) |- ($ch: 1) =
{ 
  match $z2a, $p2a, $f2a (
    Z2A2P,*,* =>
      get {2} $z2a
      pid = recv $z2a ;
      m = recv $z2a ;
      case m (
       Send(Commit(h)) =>
          -- check the list for it
          b <- lexists l (_,x)
          $a2p.A2P ; pay K $a2p {1} 
          send $a2p pisS
          let b' = if b then
            ((bit, nonce), _) = lfind l (_,x)
            send $a2p Commit(bit)
          else send $a2p Commit(False)
        Open(bit, nonce) =>
          withdrawtoken K K1 1
          $s2ro.hash ; pay K1 {1} $s2ro ;
          send $s2ro pidS ; send $s2ro x ;
          let h' = case $s2ro (
            shash => 
              recv $s2ro
              recv $s2ro
          )
          nh <- lfindMaybe l ((bit,nonce), _)
          case (nh, comh) (
            Just h', Just h => 
            (_, h) = lfind l ((bit,nonce), _)
            if h == h' then
              $a2p.A2P ; pay K {2} $a2p ;
              send $a2p pidS ; send $a2p Open ;
              -- done
            _ => -- DO NOTHING  stop -- TODO: pass channel to Z
          )
        _ => error "fd"
             -- we should do this the session type doesn't require an order of messages
      )
    Z2A2F,*,* =>
      get {2} K $z2a ;
      m = recv $z2a
      case m (
        QHash(x) => 
          -- forward to Fro
          withdrawtoken K K1 1
          $s2ro.hash ; pay K1 {1} $s2ro ;
          send $s2ro pidS ; send $s2ro x ;
          case $s2ro (
            shash => recv $s2ro
            h = recv $s2ro
            comh = Just h
            -- return this to Z
            $a2z.F2A2Z ; send $a2z RHash(h)
          ) 
      )
      -- recurse
      $ch <- sim_com_sender[K][K1] <- k rng sid $z2a $a2z $p2a $a2p $f2a $a2f $s2ro l 
}

proc sim_com_receiver[K][K1] :
  (k: Int), (rng: [Bit]), (sid: session[1]),
  ($z2a: z2a[K][rop2f[commsg[a]]][roa2f[commsg[a]]]{2}), ($a2z: a2z[K][comf2p][rof2a]{0}),
  ($p2a: p2a[K][comf2p[commmsg[a]]]{1}), ($a2p: a2p[K][comp2f[commmsg[a]]]{1}),
  ($f2a: f2a[K][comf2a[commsg[a]]]{0}), ($a2f: a2f[K][coma2f[commsg[a]]]{1}),
  ($s2ro: a2f[K1][roa2f]{0}{0}), (l: [((Bit,Int),Int)), (comh: Maybe Int) |- ($ch: 1) =




--%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

        -- TODO: how are we handling leaks in Fro 


          
          if first_input then
            require pid == 1;
            for p in l then
              withdrawtoken K K1 1 ;
              $s2ro.hash ; pay {1} K1 $s2ro ;
              send $s2ro p ;
              h = recv $s2p ;
              if h == x then
                (b: n) = h ;
                $a2p.A2P ; pay {1} K $a2p ;
                send $a2p Commit(b) ;
                break ;
              else () 
            end
            $ch <- sim_com_sender[K][K1] <- (* args *) l False failed ;
          else ()
          --  (b : n) = x ;
          --  t = search l x ;
          --  if t then 
          --    $a2p.A2P ; pay {1} K $a2p ;
          --    send $a2p 1 ;
          --    send $a2p Open ;
          --  else
          --    (* bad open *)
          --    ()
          --  end
          end 
        Send (2, Open x r) =>
          if not first_input then 
            require pid == 1;
            t = search l (b:n) 
            if t then
              $a2p.A2P ; pay {1} K $a2p ;
              send $a2p 1 ;
              send $a2p Open ; 
            else (* bad open *)
              ()
            end
        Send( 2, Msg m) =>
          $a2p.A2P ; pay {1} $a2p ;
          send $a2p 1 ;
          send $a2p (Send m) ;
          $ch <- sim_com_sender[K][K1][a] <- (* arg *)
        QHash(x) =>   
          t = search l x ;
          if t then
            $a2z.P2A2Z ; send $a2z 1 ;
            (* failed, abort *)
          else  
            withdrawtoken K K1 1 ;
            l' <- append l x ;
            $s2ro.hash ; send $s2ro x ;
            pay {1} K1 $s2ro ;
            case $s2ro (
              hash => h = recv $s2ro ;
                $a2z.F2A2Z ; send $a2z RHash(h) ; 
            )
            $ch <- sim_com_sender[K][K1] <- (* args *) l' first_input failed ;
          end   
        --GetLeak =>
        --  $a2f.A2F ;
        --  send $a2f GetLeak ;
        --  case $a2f (
        --    yes => m = recv $a2f ;
        --           $a2z.F2AZ ; send $a2z m ;
        --    no => ()
        --  $ch <- sim_com_sender[K][K1] <- (* args *) 
    *,P2A,* =>
    *,*,F2A =>
  )
                        
}

proc sim_com_receiver[K] :
  (k: Int), (rng: [Bit]), (sid: session[1]),
  (#z2a: comm[z2a[comp2f][roa2f]]), (#a2z: comm[a2z[comf2p][rof2a]),
  (#p2a: comm[p2a[rof2p]]), (#a2p: comm[p2a[rop2f]]),
  (#f2a: comm[f2a[rof2a]]), (#a2f: comm[a2f[roa2f]]), (h: Int) |- ($ch: 1) =
{
  $z2a <- acquire #z2a ;
  $z2a.RECV ;
  case $z2a ( 
    yes =>
      msg = recv $z2a ;
        Z2A2P(2, Recv) => 
          #z2a <- release $z2a ;
          $a2z <- acquire #a2z ;
          $a2z.SEND ; 
          send $a2z P2A2Z(2, No) ;
        Z2A2P(2, QHash(x)) =>
          (* check for hashes or create new one in the style of F_ro *)
          (* h <- sample rng k ; *)
          (* store (x,h) in table *)
          #z2a <- release $z2a ;
          $a2z <- acquire #a2z ;
          send $a2z P2A2Z(2, RHash(h)) ;
    no =>
      $ch <- sim_com_receiver_commitcheck[K] <- ... h ;
  )
}
          
proc sim_com_receiver_commitcheck[K] :
  (k: Int), (rng: [Bit]), (sid: session[1]),
  (#z2a: comm[z2a[comp2f][roa2f]]), (#a2z: comm[a2z[comf2p][rof2a]),
  (#p2a: comm[p2a[rof2p]]), (#a2p: comm[p2a[rop2f]]),
  (#f2a: comm[f2a[rof2a]]), (#a2f: comm[a2f[roa2f]]), (h: Int) |- ($ch: 1) =
{
  $p2a <- acquire #p2a ;
  $p2a.RECV ;
  case $p2a (
    yes =>
      msg = recvf $p2a ;
      case msg (
        P2A(2, Commit) => 
          #p2a <- release $p2a ;
          $z2a <- acquire #z2a ;
          $z2a.RECV ;
          case $z2a (
            yes => 
              msg = recv $z2a ;
              case msg (
                Z2A2P(2, Recv) =>
                  #z2a <- release $z2a ;
                  $a2z <- acquire #z2a ;
                  $a2z.SEND ;
                  h <- sample rng k ;
                  (* store h *)
                  send $a2z P2A2Z(2, Yes(1, k)) ;
                  $ch <- sim_com_receiver[K] <- ... h ;
              )
          )
        P2A(2, Open(b)) =>
          #p2a <- release $p2a ;
          x <- sample rng k ;
          (* store (b+x, h) in table *)
          $z2a <- acquire #z2a ;
          $z2a.RECV ;
          case $z2a (
            yes =>
              msg = recv $z2a ;
              case msg (  
                (* todo continue to repond to hash queries here as well *)
                Z2A2P(2, Recv) =>
                  #z2a <- release $z2a ;
                  $a2z <- acquire #a2z ;
                  $a2z.SEND ;
                  send $a2z P2A2Z(2, Yes(1, b, x)) ; 
                  $ch <- sim_com_receiver[K] <- ... h ;
              )
          )
      )
  )
}

type Z2A[a][b] = Z2A2P of PID ^ a | Z2A2F of b ;
type A2Z[a][b] = P2A2Z of PID ^ a | F2A2Z of b ;

type rop2f[a] = QHash of Int | Send of PID ^ a | Recv ;
type rof2p[a] = RHash of Int | Send 

stype comm[K][a] = &{ SEND: a * +{ yes: a * comm[K][a],
                                    no: comm[K][a] }} 


-- this code block is created when we talk about code generation
-- the providerless channels contain processes that read from communicators and 
-- offer channels with a linear session type that the protocol party actually
-- communicates with. This is such a process and the channel it offers the simulator
-- will be the one use to communicate with the internal F_ro
proc party_ro_p2f[K]:
  (#p2f: comm[rop2f][K]), (#f2p: comm[rof2p][K]) |- ($p: party[a])


proc sim_com[K][K1][a]:
  (k: Int), (rng: [Bit]), (sid: session[...]), ($z2a: comm[K][A2Z[rop2f][1]), ($a2z: comm[K][A2Z[rof2p][1]),
  ($a2s: sender[a]), ($a2r: receiver[a]), ($a2f: 1) |- ($ch: 1) =
{
  let pidS, pidR = sid ;

  #p2f <- channel[K1][rop2f] ; #f2p <- channel[K1][rof2p]
  #a2f <- channel[K1][1] ; #f2a <- channel[K1][1]

  <- Fro[K1] <- #p2f #f2p #a2f #f2a ;
  $p2f' <- ro_p2f[K1] #p2f ; $f2p' <- ro_f2p[K1] #f2p ;

  $ch <- sim_com_z2p <- k rng sid $z2a $a2z $a2s $a2r $a2f $p2f $f2p 
}

proc sim_com_z2p_crupt_committer[K][K1][a]: 
  .... ($p2f': query[K1]), ($f2p': hash[K1]), ($l: [Int]) |- ($ch: 1) =
{
  $z2p.recv ;
  case $z2p (
    yes => m = recv $z2p ; get K {1} $z2p 
           case m (
             Z2A2P(pid, msg) =>
               case msg (
                 QHash(x) => 
                   withdrawtoken K K1 1 ;
                   $l <- append $l x ;
                   $p2f'.hash; send $p2f' pid ; send $p2f' x ;
                   pay {1} K1 $p2f' ;
                   case $p2f' (
                     shash => pid = recv $p2f' ; h = recv $p2f' ;
                       $a2z.send ; send $a2z P2A2Z(pid, RHash(h))
                   )
                   $ch <- sim_zom_z2p_crupt_commitment[K][K1]
                 Send(pid, d) =>
                   b = sample rng 1 ;
                   forSeq_ $l \p ->
                     withdrawtoken K K1 1 ;
                     $p2f'.hash ; send $p2f' 1 ; send $p2f' p ;
                     pay {1} K1 $p2f' ;
                     case $p2f'( 
                       shash => recv $p2f' ; h = recv $p2f' ;
                         if h == d then
                           (b: n) = h  -- parse bit and nonce
                           break
                         else ())
                   $a2s.commit ; send $a2s b ;
                   $ch <- sim_com_z2p_crupt_committer[K][K1] <- k rng sid $z2a $a2z $a2s $a2r $p2f' $f2p' $l
               )
           )
    no => $ch <- sim_com_z2p_crupt_committer
  )
}



proc sim_com_env[K][a]: 
  (k: Int), (rng: [Bit]), (#z2pw: comm[K][rop2f[a]]), (#pw2z: comm[K][rof2p[a]]), 
  (#z2a: comm[K][1]),  (#a2z: comm[K][1]) |- ($ch: EtoZ[...]) =
{

  -- TODO: figure out how to pass the crupt list and sid as parameters. no partial application of functions
  --       in NomosUC

  $ch.init ; send $ch session ; send $ch clist ;

  
  
}
