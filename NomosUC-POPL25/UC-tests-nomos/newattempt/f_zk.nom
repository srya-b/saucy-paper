
type Vertex = Int ;
type Edge = (Vertex, Vertex) ;
type Graph = (Vertex, [Edge]) ; 

stype zk_relation[a][b] = &{ pair: a -> b -> +{ yes: 1, no: 1}}

proc ham_relation : . |- ($R: zk_relation[Graph][[Edge]]) =
{
  case $R(
    pair =>
      (* v = check the ham cycle *)
      if v then
        $R.yes ;
      else
        $R.no ;
      end
  )
}

stype verifier[a]{n} = +{ <{n} commitment: a * &{ yes: 1, no: 1}}
stype prover[a][b]{n} = +{ <{n} witness: a * b * activate[a][b]{n} }
stype activate[a][b]{n} +{ <{n} domore: actvate[a][b]{n} }


proc f_zk[a][b]{na,nb,nadv} :
  (* params *)
  ($v: verifier[a][b]{n}), ($p: prover[a][b]{nb}), ($a: adv[a][b]{nadv}) |- ($c: 1) =
{
  case $v (
    commitment => get {nb} $v ;
      x = recv $v;
      $a.commitment ;
      send $a x;
      case $p (
        witness => get {nb} $p ;
          w = recv $p; x' = recv $p;
          if x == x' then
            $R <- ham_relation <- ;
            $R.pair ; send $R (x,w) ;
            case $R (
              yes => $v.yes ;
              no => $v.no ;
            )
          else 
            $v.no ;
          end
      )
  )
}

type ham_sid = (Int, Int, Int)
type ham_msg = Accept | Challenge [Bit] ;

proc prot_ham_prover :
  (* args *)
  ($z2p: prover[Graph][[Edge]]{2}), ($p2z: 1), 
  ($p2f: p2ms[ham_sid][comp2f]), ($f2p: p2ms[ham_sid][comf2p]) |- ($ch: 1) =
{
  case $z2p (
    witness =>
      get {3} K $z2p ;
      graph = recv $z2p ; hpath = recv $z2p ;
      $R <- ham_relation <- ;
      $R.pair ; send $R (graph, hpath) ;
      case $R (
        yes => 
          let n = size graph ;
          for k in [1..n] then
            $p <- graph_permute ;
            $p.permuate ; send $p graph ;
            case $p ( permutation =>
              newnods = recv $p ;
              for i,j in zip([1..n],[1..n]) then
                let ssid = (i, j, k)
                let pi = geti newnodes i
                let pj = geti newnodes j
                let e = isedge graph pi pj 
                $p2ms.p2bf ; pay {2} $p2ms ;   (* pay for a commitment *)
                send $p2ms ssid ; send $p2ms (Commit e) ;
                if i < n then
                  case $z2p (  (* wait for another activation by Z to send another commitment *)
                    domore => get {3} K $z2p ;
                  ) 
                else ()
                (* TODO commit to format of the nodes *)
              end
            )
            if k < n then
              case $z2p (
                domore => get {3} K $z2p ;
              )
            else () end
              
        no => 
          let ssidreject = (-1, -1, -1)
          $p2f.p2bf ; send $p2f pid ; send $p2f ssidreject ;
          send $p2f (Send Reject) ;
          (* TODO finis this case *)   
      )
    )
  )
}

--proc prot_ham_verifier : 
--  (* args *)
--  ($z2p: verifier[Graph]), ($p2z: 1),
--  ($p2f: p2ms[ham_sid][comp2f]), ($f2p: ms2p[ham_sid][comf2p]) |- ($ch: 1) =
--{
--  case $f2p (
--    bf2p =>
--      ssid = recv $f2p ; m = recv $f2p ;
--      case m (
--        Recv(Reject) =>
--        Commit =>
--          let (i,j,k) = ssid ;
--            
--}


stype gperm = &{ permute: Graph -> +{ permuatation: [Vertex] * 1}}

proc graph_permute : . |- ($ch: gperm) =
{
  (* compute permuatation over the graph *)
  
}

proc sim_ham_prover[K][K1] :
  (k: Int), (rng: [Bit]), (sid: session[1]),
  ($z_to_a: z2a[K][p2ms[comp2f]][a2ms[coma2f]]), ($a_to_z: a2z[K][ms2p[comf2p]][ms2a[coma2f]]),
  ($p_to_a: p2a[K][...]),  
  (commitment: [Edge]) |- ($c: 1) =
{
  let commits :: [
  match $z_to_a, $p_to_a, $f_to_a (
    *,*,Commitment(c) =>
      (* now we should expect commitments from Z *)
      $c <- sim_ham_prover[K][K1] <- (* args *) commitment <- ;
    Z2A2P,*,* =>
      get {2} K $z_to_a ;
      let pid = recv $z_to_a ;
      let ssid = recv $z_to_a ;
      let m = recv $z_to_a ;
      
      for k in [1..n] then
        for i in [1..n] then
          for j in [1..n] then
            case m (
              Commit(e) => (* assumption on ssid *)
                         
          
        
}


