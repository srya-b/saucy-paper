type sender = +{commit : int ^ sender_committed}
type sender_committed = +{open : sender_done}
type sender_done = 1
type receiver = &{commit : receiver_committed}
type receiver_committed = &{open : int -> receiver_done}
type receiver_done = 1
type dummy = 1

type list_comms = +{cons : comm * list_msgs,
					nil : 1}


type sender2f = Commit of int | Open ;
type receiver2f = Commit of | Open of int ;
type f2receiver 

(** proc asset ideal_func_start : ($s : sender), ($r : receiver) |- ($f : dummy) = **)
proc asset ideal_func_start : ( all the sids and k and crupt ), (#s: comm[sender2f]),
	(#r: comm[receiver2f]), (#f2sender: comm[f2sender], (#f2receiver: comm[f2sender]) 
		|- ($f: dummy) =
{
  case $s (
    commit =>                 (* (s : bit ^ sender_committed), (r : receiver) |- (f :dummy) *)
              b = recv $s ;    (* (b : bit), (s : sender_committed), (r : receiver) |- (f : dummy) *)
              $r.commit ;      (* (b : bit), (s : sender_committed), (r : receiver_committed) |- (f : dummy) *)
              $f <- ideal_func_after_commit <- b $s $r
  )
}


proc asset ideal_func_start_alternative : ($s : sender), ($r : receiver) |- ($f : dummy) =
{
  $r.commit ;                  (* (s : sender), (r : receiver_committed) |- (f : dummy) *)
  case $s (
    commit =>                 (* (s : bit ^ sender_committed), (r : receiver_committed) |- (f :dummy)*)
              b = recv $s ;    (* (b : bit), (s : sender_committed), (r : receiver_committed) |- (f : dummy)*)
              $f <- ideal_func_after_commit <- b $s $r
  )
}


proc asset ideal_func_after_commit : (b : int), ($s : sender_committed), ($r : receiver_committed) |- ($f : dummy) =
{
  case $s (
    open =>                   (* (b : bit), (s : sender_done), (r : receiver_committed) |- (f : dummy)*)
            $r.open ;          (* (b : bit), (s : sender_done), (r : bit -> receiver_done) |- (f : dummy)*)
            send $r b ;        (* (b : bit), (s : sender_done), (r : receiver_done) |- (f : dummy)*)
                              (* (b : bit), (s : 1), (r : 1) |- (f : 1)*)
            wait $s ;          (* (b : bit), (r : 1) |- (f : 1)*)
            wait $r ;          (* (b : bit) |- (f : 1)*)
            close $f
  )
}


type recv_comms = &{next : comm -o recv_comms,
					comms_done : action}

proc transaction committer_init : (id : int), (m : int) |- ($d : recv_comms) =
{
	print ("created committer with id %d and number %d\n", id, m);
	$comms <- nil <- ;
    $d <- committer_recv <- id m $comms ;
}

proc transaction committer_init : (id : int), (m : int), ($comms : list_comms) 
