proc getleaks: 
	... |- ($l: a2w)
{
	$l.getleaks ;
}

type a2w = /\ +{ delay: int -> ${ok: \/ a2w},
				 getleaks: &{leaks: list[list[ARGS]]: \/ a2w},
				 exec: int -> \/ a2w}

type z2a[a][b] = A2P of pid ^ a | A2F of b | A2W of a2w ;

type z2a[a][b] = /\ +{ A2P: pid ^ a -o \/ z2a[a][b],
				 	   A2F: b -o \/ a2z[a][b],
				 	   A2W: a2w -o \/ z2a[a][b]}

type a2w = Delay of int | GetLeaks | Exec of int ;
type w2a = Poll | Leaks of list[list[ARGS]] | OK;

type z2w = Poll ;

proc sim_bracha_env_msg :
	(#z_to_a: comm[z2a]), (#a_to_z: comm[a2z]),
	(#w_to_a: comm[w2a]), (#a_to_w: comm[a2w]),
	(#f_to_a: comm[f2a]), (#a_to_f: comm[a2f]),
	(#s_to_a: comm[z2a]), (#a_to_s: comm[a2z]),
	(#s_to_p: comm[z2p]), (#p_to_s: comm[p2z]),
	(#s_to_w: comm[a2w]), (#w_to_s: comm[w2a]),
	(ideal_delay: int) 
	   |- ($z: StoE) =
{
  $r <- get_ideal_wrapper_leaks ;
  $zw <- acquire #z_to_a ;
  case $zw (
    yes => msg = recv $zw ;
	  case $msg (
	 	A2W =>
		  t = recv $msg ;
		  case $t (
		    delay =>
 			  d = recv $t ;
			  $sw <- acquire #s_to_w ;
			  $sw.SEND ;
			  send Delay(d) $sw ;
    		  $ws <- acquire #w_to_s ;
			  case $ws (
				yes => msg = recv $ws ;
				  case msg ( Ok => )
			  )
			  #w_to_s <- release $ws ;
			  #s_to_w <- release $sw ;
	
			  $dw <- delay <- #w_to_a #a_to_w internal_delay d ;

			  $az <- acquire #a_to_z ;
			  send W2A(Ok) $az ;
	   	  | getleaks =>
			  $sw <- acquire #s_to_w ;
			  $sw.SEND ;
			  send GetLeaks $sw ;
			  #s_to_w <- release $sw ;
		      $ws <- acquire #w_to_s ;
			  $ws.RECV ;
			  case $ws (
			    yes => leaks = recv $ws
			      $az <- acquire #a_to_z ;
				  $az.SEND ;
				  send Leaks(leaks) $az ;
				  #a_to_z <- release $az ;
			  )
			  #w_to_s <- release $ws ;	
			  $z <- sim_bracha_wrapper_msg <- ... ideal_delay
		  | Exec(idx) =>
		      $sa <- acquire #s_to_a ;
			  $sa.SEND ;
			  send Exec(idx) $sa ; 
			  #s_to_a <- release $sa ;
			  $ps <- #acquire #p_to_s ;
			  $ps.RECV ;
			  case $ps (
			    yes =>
					(** TODO **)
			  | no => 
				  $as <- acquire #a_to_s ;
				  $as.RECV ;
				  case $as (
				    yes => msg = recv $as ;
					  $az <- acquire #a_to_z ;
					  $az.SEND ;
					  send msg $az ;
				  | no =>
				  )
			  )
		  )
	  | A2F =>
	  	  m = recv $msg ;
		  $af <- acquire #a_to_f ;
		  $af.SEND ;
		  send m $af ;
	  | A2P =>
	  )	 
    no =>
}

proc asset delay :
	...
	(internal_delay: int), (delay: int)  |- ($z: StoE) =
{
  $aw <- acquire #a_to_w ;
  $aw.SEND ;
  send Delay(d) $aw ;
  $wa <- acquire #w_to_a ;
  case $wa ( yes => msg = recv $wa ; case msg ( Ok => ))
  #w_to_a <- release $wa ;
  #a_to_w <- release $aw ;
}	

proc asset poll :
	(#s_to_w: comm[z2w]), (#w_to_s: comm[w2z])  |- ( ... ) =
{
  $sw <- acquire #s_to_w ;
  $sw.SEND ;
  send Poll $sw ;
  #s_to_w <- release $sw ;
  $ws <- acquire #w_to_s ;
  $ws.RECV ;
  case $ws (
	yes => msg = recv $ws ;
	  case msg ( Ok => )
  | no =>
  )
}

proc transaction sim_bracha_wrapper_msg :
	...
	(ideal_delay: int) 
		|- ($z : StoE) =
{
	$wa <-acquire #w_to_a ;
	$wa.RECV ;
	case $wa (
	  yes => msg = recv $wa ;
	  	case msg (
		  Poll =>
		  	internal_delay <- internal_delay - 1 ;
			if internal_delay == 0
			then
			  $dw <- delay <- #w_to_a #a_to_w internal_delay 1 ;	    	
			end 
		
			$something <- poll <- #s_to_w #w_to_s ;	
			$ps <- #acquire #p_to_s ;
			$ps.RECV ;
			case $ps (
			  yes =>
			  	(** TODO **)
			| no => 
			    $as <- acquire #a_to_s ;
			    $as.RECV ;
			    case $as (
			      yes => msg = recv $as ;
			  	  $az <- acquire #a_to_z ;
			  	  $az.SEND ;
			  	  send msg $az ;
			    | no =>
			    )
			)
		)
	| no => 	
	)
}


proc asset get_ideal_wrapper_leaks :
	... =
{
	$aw <- acquire #a_to_w ;
	$msg <- getleaks 
	$aw.SEND ;
	send $aw $msg ;
	case $msg (
	  leaks => $leaks <- recv $msg ;
			   for leak in leaks
			     if leak[0] == INPUT
				 then
			
				 else if leak[0] == SCHEDULE
				 then 
				   
				 else

	)
	
}
