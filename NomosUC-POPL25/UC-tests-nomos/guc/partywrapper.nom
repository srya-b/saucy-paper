type comm[a] = /\ &{ SEND: pid ^ a -o \/ comm,
					 RECV: +{ no: \/ comm,
							  yes: pid ^ a * \/ comm}}

(** type p2w = /\ +{schedule: pid ^ int ^ list[ARGS] -> &{ok: \/ p2w}, **)
(** 					leak: list[ARGS] 			 -> &{ok: \/ p2w}} **)
type p2w = Schedule of pid ^ int ^ list[ARGS] | Leak of list[ARGS] ;
type w2p = Exec of pid ^ int ^ list[ARGS] | Ok ;

(** type w2p = /\ +{exec: pid ^ int ^ list[ARGS] -> \/ WtoPW} **)
type w2p = Exec of pid ^ int ^ list[ARGS] ;


(* TODO: S for sid shouldn't be a protocol specific type *)
proc party_wrapper[p2f][f2p][p2a][a2p][s][b]: 
	(#pw_to_f: comm[p2f]), (#f_to_pw: comm[f2p]),
	(#pw_to_a: comm[p2a]), (#a_to_pw: comm[a2p]),
	(#pw_to_w: comm[p2w]), (#w_to_pw: comm[w2p])  |- () = ($pw: PWtoE) =
{
  k = recv $pw ;
  rng = recv $pw ;
  sid = recv $pw ;
  clist = recv $pw ;
  [a] <- recv $pw ;
  [b] <- recv $pw ;
  $lp <- nil[pid ^ b] <- ;
  $pw <- party_wrapper_rec[p2f][f2p][p2a][a2p][b] <- $lp
}

proc party_wrapper_rec[p2z][z2p][p2f][f2p][p2a][a2p][s][b] :
	(k: int), (rng: int), (sid: string ^ s), (clist: list[pid]), 
	(#pw_to_f: comm[p2f]), (#f_to_pw: comm[f2p]),
	(#pw_to_a: comm[p2a]), (#a_to_pw: comm[a2p]),
	(#pw_to_w: comm[p2w]), (#w_to_pw: comm[w2p]),
    ($lp : list[b]) |- ($pw : PWtoZ[a]) =
{
  case $pw (
    z_to_p => s = recv $pw ;
              p = recv $pw ;
              m = recv $pw ;
              exists = find_party p $lp ;
              if exists
              then
                $lpnew <- send_msg <- m p s $lp ;
                $pw <- party_wrapper_rec[a][b] <- $lp
              else
                #toZ <- communicator_init[z2p] <- p env_id ;
                #fromZ <- communicator_init[p2z] <- env_id p ;
                #toA <- communicator_init[p2a] <- p adv_id ;
                #fromA <- communicator_init[a2p] <- adv_id p ;
                #toF <- communicator_init[p2f] <- p f_id ;
                #fromF <- communicator_init[f2p] <- f_id p ;
                $pnew <- PS.party_code <- p #toZ #fromZ #toA #fromA #toF #fromF ;
                $lp' <- pcons <- $pnew $lp ;
                $lp <- send_msg <- m p s $lp' ;
                $pw <- party_wrapper_rec2[p2f][f2p][p2a][a2p][b] <- $lp
  )
}

proc party_wrapper_rec2[p2f][f2p][p2a][a2p][b]:
	(#pw_to_f: comm[p2f]), (#f_to_pw: comm[pid ^ f2p]),
	(#pw_to_a: comm[p2a]), (#a_to_pw: comm[pid ^ a2p] ??),
	(#pw_to_w: comm[p2w]), (#w_to_pw: comm[pid ^ w2p]),
    ($lp : list[b]) |- ($pw : PWtoZ[a]) =
{
	$fp <- acquire #f_to_pw ;
	$fp.RECV ;
	case $fp (
	  yes => p = recv $fp ;
			 $msg = recv $fp ;
	 		 exists = find_party p $lp ;
			 if exists
			 then
			   $lpnew <- send_msg <- m p $lp ;
			   $pw <- party_wrapper_rec3[p2f][f2p][p2a][a2p][b] <- ... $lpnew
			 else
               #toZ <- communicator_init[a] <- p env_id ;
               #fromZ <- communicator_init[a] <- env_id p ;
               #toA <- communicator_init[a] <- p adv_id ;
               #fromA <- communicator_init[a] <- adv_id p ;
               #toF <- communicator_init[a] <- p f_id ;
               #fromF <- communicator_init[a] <- f_id p ;
               $pnew <- PS.party_code <- p #toZ #fromZ #toA #fromA #toF #fromF ;
               $lp' <- pcons <- $pnew $lp ;
               $lp <- send_msg <- m p s $lp' ;
               $pw <- party_wrapper_rec2[p2f][f2p][p2a][a2p][b] <- $lp
    | no => 
            $pw <- party_wrapper_rec2[p2f][f2p][p2a][a2p][b] <- $lp
	)
}

proc party_wrapper_rec3[p2f][f2p][p2a][a2p][b]:
	(#pw_to_f: comm[p2f]), (#f_to_pw: comm[pid ^ f2p]),
	(#pw_to_a: comm[p2a]), (#a_to_pw: comm[pid ^ a2p]),
	(#pw_to_w: comm[p2w]), (#w_to_pw: comm[pid ^ w2p]),
    ($lp : list[b]) |- ($pw : PWtoZ[a]) =
{
	$fw <- acquire #w_to_pw ;
	$fw.RECV ;
	case $fw (
	  yes => p = recv $fw ; 
			 $msg = recv $fw ;
			 exists = find_party p $lp ;
			 if exists
			 then
			   $lpnew <- send_msg <- m p $lp ;
			   $pw <- party_wrapper_rec[p2f][f2p][p2a][a2p][b] <- ... $lpnew ;
			 else
               #toZ <- communicator_init[a] <- p env_id ;
               #fromZ <- communicator_init[a] <- env_id p ;
               #toA <- communicator_init[a] <- p adv_id ;
               #fromA <- communicator_init[a] <- adv_id p ;
               #toF <- communicator_init[a] <- p f_id ;
               #fromF <- communicator_init[a] <- f_id p ;
               $pnew <- PS.party_code <- p #toZ #fromZ #toA #fromA #toF #fromF ;
               $lp' <- pcons <- $pnew $lp ;
               $lp <- send_msg <- m p s $lp' ;
               $pw <- party_wrapper_rec[p2f][f2p][p2a][a2p][b] <- $lp
	)
}


