type a2w = /\ + +{ delay: int -> &{ok: \/ a2w},
				   getleaks: &{leaks: list[list[ARGS]]: \/ a2w},
				   exec: int -> \/ a2w }

type w2a = /\ +{ poll: \/ w2a}

(* Parameter `a` should be the type `p2fh' *)
type a2z[a][b] = /\ +{ A2P: pid ^ a -o \/ a2z[a][b],
					   A2F: b -o \/ a2z[a][b],
					   A2W: a2w -o \/ a2z[a][b] }

(* Parameter `a' should be the type `fh2p' *)
type z2a[a][b] = /\ +{ P2A: pid ^ a -o \/ z2a[a][b],
					   F2A: b -o \/ z2a[a][b],
					   W2A: w2a -o \/ z2a[a][b]}

proc asset dummy_adv[a][b]:
	(#z_to_a: comm[z2a[a][b]]), (#a_to_z: comm[a2z[a][b]),
	(#f_to_a: comm[b]), (#a_to_f: comm[b])  |- ($z: z2a) =

{
	case $z (
	  A2P => pid = recv $z ;
			 $msg = recv $z ;
	  	     $ap <- acquire #a_to_p ;
	  	     $ap.SEND ;
	  	     send $ap $msg ;
	  	     #a_to_p <- release $ap ;
    | A2F => $msg = recv $z ;
			 $af <- acquire #a_to_f ;
			 $af.SEND ;
			 send $af $msg ;
			 #a_to_f <- release $af ;
    | A2W => $msg = recv $z ;
			 $aw <- acquire #a_to_w ;
			 $aw.SEND ;
			 send $aw $msg ;
			 #a_to_w <- release $aw ;
	)
}
