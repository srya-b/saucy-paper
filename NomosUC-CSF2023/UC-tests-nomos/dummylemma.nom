

proc simulator[z2a][a2z][p2a][a2p][f2a][a2f]
						  {z2an}{a2zn}{p2an}{a2pn}{f2an}{a2fn} :
		  (#z_to_adv: comm[z2a]), (#adv_to_z: comm[a2z]),
		  (#p_to_adv: comm[p2a]), (#adv_to_p: comm[a2p]),
		  (#f_to_adv: comm[f2a]), (#adv_to_f: comm[f2a])  |- ($adv: AtoE) =
{
	k = recv $adv ;
	rng = recv $adv ;
	sid = recv $adv ;
	clist = recv $adv ;

	#a_z2a <- sim_communicator_init[z2a]{z2an} <- (* no ids given here because S can choose the sender id *)
	#a_f2a <- sim_communicator_init[f2a]{p2an} <- (* no ids given here because S can choose the sender id *)
	#a_p2a <- sim_communicator_init[p2a]{f2an} <- (* no ids given here because S can choose the sender id *)
	#a_a2p <- sim_communicator_init[a2p]{a2pn} <- (* no ids given here because S can choose the sender id *)
	#a_a2f <- sim_communicator_init[a2f]{a2fn} <- (* no ids given here because S can choose the sender id *)
	#a_a2z <- sim_communicator_init[a2z]{a2zn} <- (* no ids given here because S can choose the sender id *)

	#sd_z2a <- sim_communicator_init[z2a]{z2an} <- (* no ids given here because S can choose the sender id *)
	#sd_a2z <- sim_communicator_init[a2z]{a2zn} <- (* no ids given here because S can choose the sender id *)
	#sd_f2a <- sim_communicator_init[z2a]{f2an} <- (* no ids given here because S can choose the sender id *)
	#sd_a2f <- sim_communicator_init[a2f]{a2fn} <- (* no ids given here because S can choose the sender id *)
	#sd_p2a <- sim_communicator_init[p2a]{p2an} <- (* no ids given here because S can choose the sender id *)
	#sd_a2p <- sim_communicator_init[a2p]{a2pn} <- (* no ids given here because S can choose the sender id *)
	

	$adv <- simulator_1[z2a][a2z][p2a][a2p][f2a][a2f]
							{z2an}{a2zn}{p2an}{a2pn}{f2an}{a2fn } 
		  	<- #z_to_adv #adv_to_z #p_to_adv #adv_to_p #f_to_adv #adv_to_f
					 #a_z2a #a_a2z #a_f2a #a_a2f #a_p2a #a_a2p
					 #sd_z2a #sd_a2z #sd_f2a #sd_a2f #sd_p2a #sd_a2p ;
}

proc simulator_1[z2a][a2z][p2a][a2p][f2a][a2f]
						  {z2an}{a2zn}{p2an}{a2pn}{f2an}{a2fn} :
		  (#z_to_adv: comm[z2a]{z2an}), (#adv_to_z: comm[a2z]{a2zn}),
		  (#p_to_adv: comm[p2a]{p2an}), (#adv_to_p: comm[a2p]{a2pn}),
		  (#f_to_adv: comm[f2a]{f2an}), (#adv_to_f: comm[a2f]{a2fn}),
			(#a_z2a: simcomm[z2a]{z2an}), ...  |- ($adv: AtoE) =
{
	$z2a <- acquire #z_to_adv ;
	$z2a.RECV ;
	case $adv (
		yes => msg = recv $adv ;
					 get {z2an} $adv ;
					 $az2a <- acquire $a_z2a
					 $az2a.SEND ;
					 send $az2a msg ;
					 simpay $az2a {z2an} ;
					 simulate $az2a ;
					 #a_z2a <- release $az2a ;
					 $adv <- simuator_a_a2_ <- .... 
	 | no => (* move to the next process *) 
}

proc simulator_a_a2_ <- .... |- ($adv: AtoE) =
{
	$aa2p <- acquire #a_a2p ;
	$aa2p.RECV ;
	case $aa2p (
		yes => pid = recv$aa2p ;
					 msg = recv $aa2p ;
					 simget $aa2p {a2pn} ;
					 #a_a2p <- release $aa2p ;
					 msg = A2P( pid, msg ) ;
					 $sdz2a <- acquire #sd_z2a ;
					 $sdz2a.SEND ;
					 send $sdz2a msg ;
					 simpay $sdz2a {z2an} ;
					 simulate $sdz2a ;
					 #sd_z2a <- release $sdz2a ;
					 $adv <- simulator_sd_sd2_ <- ... ;
	 | no => $aa2f <- acquire #a_a2f ;
					 $aa2f.RECV ;
					 case $aa2f (
					   yes => msg = recv $aa2f ;
						      	simget $aa2p
										#a_a2f <- release $aa2f ;
									  msg = A2F( msg ) ;
										$sdz2a <- acquire #sd_z2a ;
										$sdz2a.SEND ;
										send $sdz2a msg ;
										simpay $sdz2a {z2an} ;
										simulate $sdz2a ;
										#sd_z2a <- release $sdz2a ;
										$adv <- simulator_sd_sd2 <- ... ;
					  | no => $aa2z <- acquire #a_a2z ;
										$aa2z.RECV ;
										case $aa2z (
											(* 
												 We deivate from the dummy lemma proof in the paper here because
												 S activates S_d with input even when A generates output for Z or
												 when it doesn't generate any output at all only to keep the E_d
												 environment balanced in the proof. We don't care about that 
												 here (yet?)
											*)
											yes => msg = recv $aa2z ;
														 simget $aa2z {a2zn};
														 #a_a2z <- release $aa2z ;
														 $a2z <- acquire #adv_to_z ;
														 $a2z.SEND ;
														 send $a2z msg ;
														 pay $a2z {z2an} ;
														 #adv_to_z <- release $a2z ;
										 | no => $adv <- simulator_2 <- ... ;
										)
					 )
	)
}

proc simulator_sd_sd2 : ... |- ($adv: AtoE) =
{
	$sda2f <- acquire #sd_a2f ;
	$sda2f.RECV ;
	case $sda2f (
		yes => msg = recv $sda2f ;
					 simget {a2fn} $sda2f ;
					 $sd_a2f <- release $sda2f ;
					 $a2f <- acquire #adv_to_f ;
					 $a2f.SEND ;
					 send $a2f msg ;
					 pay $a2f {a2fn};
					 #adv_to_f <- release $a2f ;
					 $adv <- simulator_2 <- ... ;
	 | no => $sda2p <- acquire #sd_a2p ;	
					 $sda2p.RECV ;
					 case $sda2p (
					   yes => pid = recv $sda2p ;
						 				msg = recv $sda2p ;
						 				simget {a2pn} $sda2p ;
						 				#sd_a2p <- release $sda2p ;
						 				$a2p <- acquire #adv_to_p ;
						 				$a2p.SEND ;
						 				pay $a2p {a2pn} ;
						 				#adv_to_p <- release $a2p ;
										$adv <- simulator_2 <- ... ;
					  | no => $sda2z <- acquire #sd_a2z ;
										$sda2z.RECV ;
										case $sda2z (
											yes => msg = recv $sda2z ;
														 simget {a2zn} $sda2z ;
														 #sd_a2z <- release $sda2z ;
														 $a2z <- acquire #adv_to_z ;
														 $a2z.SEND ;
														 send $a2z msg ;
														 pay $a2z {a2zn} ;
														 #adv_to_z <- release $a2z ;
														 $adv <- simulator_2 <- ... ;
									   | no => $adv <- simulator_2 <- ... ;
										)
					 )
	)
}

proc simulator_2 : ... |- ($adv: AtoE) =
{
	$f2a <- acquire #f_to_adv ;
	$f2a.RECV ;
	case $f2a (
			
	)
}
