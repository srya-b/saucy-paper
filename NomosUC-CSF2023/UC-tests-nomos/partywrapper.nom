type w2p = Exec of pid ^ int ^ list[ARGS] | Ok ;
type w2p = Exec of pid ^ int ^ list[ARGS] ;

proc party_wrapper{all the imports}[p2f][f2p][p2a][a2p][z2p][p2z][s]: 
	(#pw_to_f: comm[p2f]), (#f_to_pw: comm[f2p]),
	(#pw_to_a: comm[p2a]), (#a_to_pw: comm[a2p]),
  (#pw_to_z: comm[p2z]), (#z_to_pw: comm[z2o])   |- ($pw: PWtoE) =
{
  k = recv $pw ;
  rng = recv $pw ;
  sid = recv $pw ;
  clist = recv $pw ;
  $lp <- nil[pid ^ b] <- ;
  $pw <- party_wrapper_rec  <- k rng sid $lp #pw_to_f #f_to_pw #pw_to_a #a_to_pw
}

proc party_wrapper_rec[p2f][f2p][a2p][pfa][z2p][p2z] :
	(k: int), (rng: [Bit]), (sid: PS.sid), (clist: list[pid]), 
	(#pw_to_f: comm[pid ^ p2f]{p2fn}), (#f_to_pw: comm[pid ^ f2p]{f2pn}),
	(#pw_to_a: comm[pid ^ p2a]{0}), (#a_to_pw: comm[pid ^ a2p]{a2pn}),
	(#pw_to_z: comm[pid ^ p2z]{p2zn}), (#z_to_pw: comm[pid ^ p2z]{z2pn}),
  ($lp : list[b]) |- ($pw : PWtoZ[a]) =
{
  $pw <- acquire #z_to_pw ; 
  $pw.RECV ;
  case $pw (
    yes => msg = recv $pw ;
  		case $pw (
    		z_to_p => s = recv $pw ;
    		          p = recv $pw ;
    		          m = recv $pw ;
					  		  get {z2pn} $pw ;
					  		  #z_to_pw <- release $pw ;

								  if iscrupt pid clist
								  then
								    throw exception ??
							  	else
    		            exists = find_party p $lp ;
    		            if exists
    		            then
    		              (*$lpnew <- send_msg <- m p s $lp ;*)
											#z_to_pw_to_p <- get_chan <- s p $lp ;
											$pw2p <- acquire #z_to_pw_to_p ;
											$pw2p.SEND ;
											send $pw2p msg ;
											simpay {z2pn} $pw2p ;
											simulate $pw2p ;
											(* TODO: What's the correct list/dict operation to do when releasing? *)
											#z_to_pw_to_p <- release $pw2p
    		              $pw <- party_wrapper_rec[a][b] <- $lp
    		            else
								      $nremains <- genpot {*} T;
    		              #toZ <- sim_communicator_init[p2z] <- p env_id ;
									  	<- translate <- p #toZ #pw_to_z ;
    		              #fromZ <- sim_communicator_init[z2p] <- env_id p ;
    		              #toA <- sim_communicator_init[p2a] <- p adv_id ;
									  	<- translate <- p #toA #pw_to_a ;
    		              #fromA <- sim_communicator_init[a2p] <- adv_id p ;
    		              #toF <- sim_communicator_init[p2f] <- p f_id ;
									  	<- translate <- p #toF #pw_to_f ;
    		              #fromF <- sim_communicator_init[f2p] <- f_id p ;
    		              $pnew <- PS.party_code <- p #toZ #fromZ #toF #fromF ;
    		              $lp' <- pcons <- $pnew $lp ;
    		              $lp <- send_msg <- m p s $lp' ;
    		              $pw <- party_wrapper_rec2 <- $lp
  )
}

proc party_wrapper_rec2[p2f][f2p][p2a][a2p][b]:
	(#pw_to_f: comm[pid ^ p2f]), (#f_to_pw: comm[pid ^ f2p]),
	(#pw_to_a: comm[pid ^ p2a]), (#a_to_pw: comm[pid ^ a2p] ??),
	(#pw_to_z: comm[pid ^ p2z]), (#z_to_pw: comm[pid ^ z2p]),
    ($lp : list[b]) |- ($pw : PWtoZ[a]) =
{
	$fp <- acquire #f_to_pw ;
	$fp.RECV ;
	case $fp (
	  yes => p = recv $fp ;
			 		 msg = recv $fp ;
					 get $fp {f2an} ;
			 		 #f_to_pw <- release $fp ;
			 		 if iscrupt pid clist ;
		   		   $pa <- acquire #pw_to_a ;
			 		   $pa.SEND ;
			 		   send $pa p ^ msg ;
			 		   #pw_to_a <- release $pa ;
					   $pw <- party_wrapper_rec3[p2f][f2p][p2a][a2p][b] <- $lp ;
			 		 else
	 		 		   exists = find_party p $lp ;
			 		   if exists
			 		   then
			 		     (*$lpnew <- send_msg <- m p $lp ;*)
			 		     #f_to_pw_to_p <- get_chan <- s p $lp ;
			 		     $pw2p <- acquire #z_to_pw_to_p ;
			 		     $pw2p.SEND ;
			 		     send $pw2p msg ;
			 		     simpay {z2pn} $pw2p ;
			 		     simulate $pw2p ;
			 		     (* TODO: What's the correct list/dict operation to do when releasing? *)
			 		     #z_to_pw_to_p <- release $pw2p
			 		     $pw <- party_wrapper_rec3[p2f][f2p][p2a][a2p][b] <- ... $lpnew
			 		   else
       		     #toZ <- sim_communicator_init[p2z] <- p env_id ;
			 		     <- translate <- p #toZ #pw_to_z ;
       		     #fromZ <- sim_communicator_init[z2p] <- env_id p ;
       		     #toA <- sim_communicator_init[p2a] <- p adv_id ;
			 		     <- translate <- p #toA #pw_to_a ;
       		     #fromA <- sim_communicator_init[a2p] <- adv_id p ;
       		     #toF <- sim_communicator_init[p2f] <- p f_id ;
       		     #fromF <- sim_communicator_init[f2p] <- f_id p ;
       		     $pnew <- PS.party_code[p2z <- p #toZ #fromZ #toF #fromF ;
       		     $lp' <- pcons <- $pnew $lp ;
       		     $lp <- send_msg <- m p s $lp' ;
					     #f_to_pw_to_p <- get_chain <- s p $lp ;
					     $pw2p <- acquire $f_to_pw_to_p ;
					     send $pw2p msg ;
					     simpay {z2pn} #pw2p ;
					     simulate $pw2p ;
					     #f_to_pw_to_p <- release #pw2p ;
       		     $pw <- party_wrapper_rec3[p2f][f2p][p2a][a2p][b] <- $lp
   | no => $pw <- party_wrapper_rec3[p2f][f2p][p2a][a2p][b] <- $lp
	)
}

proc party_wrapper_rec3 :
	(k: int), (rng: [Bit]), (sid: PS.sid), (clist: list[pid]), 
	(#pw_to_f: comm{p2fn}[pid ^ p2f]), (#f_to_pw: comm{f2pn}[pid ^ f2p]),
	(#pw_to_a: comm{f2pn}[pid ^ p2a]), (#a_to_pw: comm{a2pn}[pid ^ a2p]),
	(#pw_to_z: comm{p2zn}[pid ^ p2z]), (#z_to_pw: comm{p2zn}[pid ^ p2z]),
    ($lp : list[b]) |- ($pw : PWtoZ[a]) =
{
  $pa <- acquire #a_to_pw ; 
  $pa.RECV ;
  case $pa (
    yes => p = recv $pa ;
					 msg = recv $pw ;
					 get $p2a {p2an} ;
					 #a_to_pw <- release $pa ;
					 if iscrupt pid clist
					 then
					   $pf <- acquire #pw_to_f ;
						 $pf.SEND ;
						 send $pf p ^ msg ;
						 pay {*} $pf ;
						 #pw_to_f <- release $pf ;
						 $pw <- party_wrapper_rec1[p2f][f2p][p2a][a2p][p2z][z2p] <- $lp ;
					 else
					   throw Exception??
	 | no => $pw <- party_wrapper_rec1[p2f][f2p][p2a][a2p][p2z][z2p] <- $lp ;
  )
}


proc transalte[a][b]{an} :
	(id: pid), (#to_inner: comm[a]{an}), (#to_outter: comm[b]{an}) |- ($t: 1) =
{
	$ti <- acquire #to_inner ;
	$ti.RECV ;
	case $ti (
		yes => msg = recv $ti ;
				   get {*} $ti ;
					 #to_inner <- release $ti;
					 $to <- acquire #to_outter ;
					 send $to id ^ msg ;
				 	 pay {an} $to ;
					 #to_outter <- release $to ;
					 $t <- translate id #to_inner #to_outter ;
  | no => #to_inner <- release $ti ;
					$t <- translate id #to_inner #to_outter ;
	) 
}
