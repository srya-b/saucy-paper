type ARGS = +{INT: int ^ 1, BOOL: bool ^ 1, STR: string ^ 1}

(*type p2w = /\ +{exec: pid ^ int ^ list[ARGS] -> \/ WtoPW}*)
type p2w = Schedule of pid ^ int ^ list[ARGS] ;

type w2p = Exec of pid ^ int ^ list[ARGS] ;

(*type w2f = /\ +{exec : int ^ list[ARGS] -> w2f}*)
type w2f = Exec of int ^ list[ARGS] | OK ;

(*type f2w = /\ +{schedule: int ^ list[ARGS] -> &{ok : \/ f2w},*)
(*				     leak: list[ARGS]       -> &{ok: \/ f2w}}*)
type f2w = Schedule of int ^ list[ARGS] | Leak of list[ARGS] ;

(*type w2a = /\ +{poll: \/ w2a,*)
(*				leaks: list[list[ARGS]] -> \/ w2a}*)
type w2a = Poll | Leaks of list[list[ARGS]] | OK ;


(*type a2w = /\ +{    delay: |{p}> int -> &{ok : \/ a2w},*0
(*				 getleaks: &{leaks: list[list[ARGS]]: \/ a2w},*)
(*  				     exec: int -> \/ a2w }*)
type a2w = Delay of int | GetLeaks of list[list[ARGS]] | Exec of int ; 

type WtoE = k -> rng -> sid -> crupt list -> WtoZ
(*type z2w = +{poll : z2w}*)
type z2w = Poll ;


process wrapper : 
  (#w_to_adv : comm[a2w]), (#adv_to_w : comm[w2a]), 
  (#w_to_pw : comm[w2p]), (#pw_to_w : comm[p2w]),
  (#w_to_f : comm[w2f]),   (#f_to_w : comm[f2w]),
  (#w_to_z : 1), (#z_to_w: comm[z2w])    |- ($w : WtoE)
{
	k = recv $w ;
	rng = recv $w ;
	sid = recv $w ;
	clist = recv $w ;
	delay = 0 ;
	$todo <- nil[int ^ list[ARGS] ^ bool ^ pid] <- ;
	$leaks <- nil[list[ARGS]] <- ;
	$pw <- party_wrapper_rec <- #w_to_adv #adv_to_w #w_to_pw #pw_to_w #w_to_f #f_to_w #w_to_z #z_to_w delay $todo $leaks
}

proc transaction execmsg[a]:
  (f: int), ($l: list[ARGS]) |- ($execmsg: a) =
{
	$w2pmsg.exec ;
	send $w2pmsg id ;
	send $w2pmsg f ;
	send $w2pmsg $l ;
}

proc asset wrapper_rec :
  (#w_to_adv : comm[a2w]), (#adv_to_w: comm[w2a]), 
  (#w_to_pw : comm[w2p]), (#pw_to_w: comm[p2w]),
  (#w_to_f : comm[w2f]),   (#f_to_w: comm[f2w]),
  (delay : int), ($todo : list[int ^ list[ARGS] ^ bool ^ pid])  
  ($leaks: list[list[ARGS]]) |- ($zw : w2z)
{
	case $zw (
	  poll => if delay > 0
			  then 
			    delay = delay - 1 ;
			  	$lf <- acquire #w_to_adv ;
				$lf.SEND ;
				send $lf Poll ;							(* TODO: type constructor correct? *)
				#w_to_dv <- release $lf ;
				$zw <- wrapper_rec2 <- #w_to_adv #adv_to_w #w_to_pw #pw_to_w #w_to_z #z_to_w delay $todo $leaks
			  else
				exists = find_next_code_block $todo ;
				if exists
				then
				  f, args, isf, pid = get_code_block $todo 0 ;
				  $todonew <- pop $todo ;
				  if isf
				  then
					(** $execmsg <- execmsg[w2f] f args **)
				  	$wf <- acquire #w_to_f ;  
				  	$wf.SEND ;
					send $wf Exec(f, args) ;
				  	(** send $wf 0;        **)
				  	(** send $wf $execmsg ;**)
				  	#w_to_f <- release $wf ;
				    $zw <- wrapper_rec2 <- #w_to_adv #adv_to_w #w_to_pw #pw_to_w #w_to_z #z_to_w delay $todonew $leaks
				  else
					(** $execmsg <- execmsg[w2p] f args **)
					$wp <- acquire #w_to_p ;
					$wp.SEND ;
					send $wp Exec(f, args) ;
					(** send $wp pid ;      **)
					(** send $wp $execmsg ; **)
					#w_to_p <- release $wp ;
				    $zw <- wrapper_rec2 <- #w_to_adv #adv_to_w #w_to_pw #pw_to_w #w_to_z #z_to_w delay $todonew $leaks
	)
}



process wrapper_rec2 :
  (#w_to_adv : comm[w2a]), (#adv_to_w : comm[a2w]), 
  (#w_to_pw : comm[w2p]), (#pw_to_w : comm[p2w]),
  (#w_to_f : comm[w2f]),   (#f_to_w : comm[f2w]),
  (delay : int), ($todo : list[int ^ list[ARGS] ^ bool ^ pid]),
  ($leaks : list[list[ARGS]])  |- ($zw : WtoZ)
{
	$aw <- acquire #a_to_w ;
	$aw.RECV ;
	case $aw (
	  yes => msg = recv $aw ;
	         #a_to_w <- release $aw ;
			 case msg (
	           Delay(d) => delay = delay + d ;				(** TODO: how much potential sent over communicator?? **)
						   $w2a <- acquire #w_to_a ;
						   $w2a.SEND ;
						   send $w2a Ok ;
	 					   #w_to_a <- release $w2a ;
	         		       $zw <- wrapper_rec3 <- #w_to_adv #adv_to_w #w_to_pw #pw_to_w #w_to_z #z_to_w delay $todo
	         | Exec(i) => exists = find_code_block $todo i ;
	        		      if exists
	        		      then
	        		        f, args, isf, pid = get_code_block $todo i ;
	        			    $todonew <- popat $todo i ;
	        			    if isf
	        			    then
	        			      (** $execmsg <- execmsg[w2f] f args **)
	        			      $wf <- acquire #w_to_f ;  
	        			      $wf.SEND ;
							  send $wf Exec(f, args) ;
	        			      #w_to_f <- release $wf ;
	        			      $zw <- wrapper_rec3 <- #w_to_adv #adv_to_w #w_to_pw #pw_to_w #w_to_z #z_to_w delay $todonew
	        			    else
	        			      (** $execmsg <- execmsg[w2p] f args **)
	        			      $wp <- acquire #w_to_p ;
	        			      $wp.SEND ;
							  send $wp Exec(pid, f args) ;
	        			      #w_to_p <- release $wp ;
	        			      $zw <- wrapper_rec3 <- #w_to_adv #adv_to_w #w_to_pw #pw_to_w #w_to_z #z_to_w delay $todonew
	         | GetLeaks => $w2a <- acquire #w_to_a ;
						   $w2a.SEND ;
						   send $w2a Leaks( $leaks ) ;
						   #w_to_a <- release $w2a ;
	        			   $leaksnew <- nil[list[ARGS]] <- ;
	        			   $zw <- wrapper_rec3 <- #w_to_adv #adv_to_w #w_to_pw #pw_to_w #w_to_z #z_to_w delay $todo $leaksnew
	         ) 
    | no => 
	  		$zw <- wrapper_rec3 <- ... $todo $leaks
	)
}

proc asset tcons : ($m : int ^ list[ARGS] ^ bool ^ pid), 
			       ($tl : list[int ^ list[ARGS] ^ bool ^ pid]) 
				|- ($l : list[int ^ list[ARGS] ^ bool ^ pid]) =
{
	$l.cons ;
	send $l $m ;
	$l <- $tl
}

proc asset lcons : ($m : list[ARGS]), 
			       ($tl : list[list[ARGS]]) 
				|- ($l : list[list[ARGS]]) =
{
	$l.cons ;
	send $l $m ;
	$l <- $tl
}

proc wrapper_rec3 :
  (#w_to_adv : comm[w2a]), (#adv_to_w : comm[a2w]), 
  (#w_to_pw : comm[w2p]), (#pw_to_w : comm[p2w]),
  (#w_to_f : comm[w2f]),   (#f_to_w : comm[f2w]),
  (delay : int), ($todo : list[int ^ list[ARGS] ^ bool ^ pid]),
  ($leaks : list[list[ARGS]])  |- ($zw : WtoZ)
{
	$fw <- acquire #f_to_w ;
	$fw.RECV ;
	case $fw (
	  yes => msg = recv $fw ;
			 #f_to_w <- release $fw ;
	  		 case msg (
	           Schedule(f, args) => delay = delay + 1 ;
	         			            $todonew <- tcons <- (f, args, False, 0) $todo ;
	         			            $leaksnew <- lcons <- ("schedule", $todo.length-1) $leaks ;
									$wf <- acquire #w_to_f ;
									$wf.SEND ;
									send $wf Ok ;
	         			            #w_to_f <- release $wf ;
	         		                $zw <- wrapper_rec4 <- #w_to_adv #adv_to_w #w_to_pw #pw_to_w #w_to_z #z_to_w delay $todonew $leaksnew
	         | Leak(leak) => leak = recv $msg ;
	        		         $leaksnew <- lcons <- leak $leaks ;
							 $wf <- acquire #w_to_f ;
							 $wf.SEND ;
							 send $wf Ok ;
	        		         #w_to_f <- release $wf ;
	        		         $zw <- wrapper_rec4 <- #w_to_adv #adv_to_w #w_to_pw #pw_to_w #w_to_z #z_to_w delay $todo $leaksnew 
			   
			 )
    | no => 
		    $zw <- wrapper_rec4 ... $todo $leaks
	)
}

type PWtoW = /\ +{schedule: pid ^ int ^ list[ARGS] -> &{ok: \/ PWtoW},
				      leak: list[ARGS]             -> ${ok: \/ PWtoW }}

proc wrapper_rec4 :
  (#w_to_adv : comm[w2a]), (#adv_to_w : comm[a2w]), 
  (#w_to_pw : comm[w2p]), (#pw_to_w : comm[p2w]),
  (#w_to_f : comm[w2f]),   (#f_to_w : comm[f2w]),
  (delay : int), ($todo : list[int ^ list[ARGS] ^ bool ^ pid]),
  ($leaks : list[list[ARGS]])  |- ($zw : WtoZ)
{
	$pw <- acquire #pw_to_w ;
	$pw.RECV ;
	case $fw (
	  yes => msg = recv $pw ;
	         #pw_to_w <- release $pw ;
		     case msg (
	           Schedule(pid, f, args) => delay = delay + 1 ;
	       			                     $todonew <- tcons <- (f, args, True, pid) $todo ;
	       			                     $leaksnew <- lcons <- (schedule, $todonew.length-1) $leaks ;
	       			                     $wp <- acquire #w_to_pw ;
										 $wp.SEND ;
										 send $wp Ok ;
	       		                         $zw <- wrapper_rec <- #w_to_adv #adv_to_w #w_to_pw #pw_to_w #w_to_z #z_to_w delay $todonew $leaksnew
	         | Leak(leak) => $leaksnew <- lcons <- leak $leaks ;
							 $wp <- acquire #w_to_pw ;
							 $wp.SEND ;
							 send $wp Ok ;
							 #w_to_pw <- release $wp ;							
		   )
	| no =>
		$zw <- wrapper_rec <- ... $todo $leaks
			   
	)
}


