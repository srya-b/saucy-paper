-- commit or send a message
stype committerp2f[a] = +{ |{2}> commit: Bit * commmitedp2f[a],
                           |{1}> sendmsg: a * committerp2f[a]}

stype sender = +{ |{2}> commit: Bit * +{ |{0}> open: 1}
stype receiver = &{ <{1} committed: &{ <{0}| opened: Bit} }
stype adv = &{ committed: +{ ok: &{ opened: +{ okopen: 1 }}}}

-- open or send a message
stype committedp2f[a] = +{ |{1}> open: donep2f[a],
                           |{1}> sendmsg: a * committedp2f[a]}

-- receive a message from receiver
stype committerf2p[a] = &{ <{1}| msg: a -> committerf2p[a] }

-- send a message to the committer
stype receiverp2f[a] = +{ |{1}> sendmsg: a -> senderf2p[a]} 

-- receive a commitment or a message
stype receiverf2p[a] = &{ <{0}| committed: receivedf2p[a],
                          <{1}| msg: a -> receiverf2p[a]}

-- receive an opening or a message
stype receivedf2p[a] = &{ <{1}| opened: Bit -> donep2f[a],
                          <{1}| msg: a -> receivedf2p[a] }

-- send a message to the other party (transitions to after opening so channel rmains open)
stype donep2f[a] = +{ |{1}> sendmsg: a * donep2f[a] }

-- adv can get leak
--stype adv[a] = +{ getleak: &{ yes: a -> adv[a],
--                              no: adv[a] }}
--
macro admsg := sendermsg: a -> +{ deliver: adv[a] },
               receivermsg: a -> +{ deliver: adv[a] }

stype adv[a] = &{ commit: +{ ok: advcommitted[a] },
                  macro admsg }

stype advcommitted[a] = &{ open: +{ ok: messages[a] },
                           macro admsg }

stype messages[a] = &{ macro admsg }

type comSID = (PID, PID)

(* just fcom *)
proc F_com[K][a] :
  (k: Int), (rng: [Bit]), (sid: SID[comSID]),
  ($S: sender), ($R: receiver) ($A: adv) |- ($ch: 1) =
{
  case $S (
    commit => b = recv $S ;
      get $S K {1}
      $A.committed
      case $A ( ok =>
      $R.committed;
      case $S (
        Open => $A.opened 
          case $A ( ok =>
          $R.Open ; send $R b )
      )
  )
}

(* fcom with a channel *)
proc F_com[K][a] :
  (k: Int), (rng: [Bit]), (sid: session[1]),
  ($S: sender[a]), ($Sf2p: senderf2p[a]),
  ($Rp2f: receiverp2f[a]),($R: receiver[a]), ($A: adv[a]),
  (leakbuf: a)  |- ($ch: 1) =
{
  match $S, $Rp2f, $A (
    commit,*,* => b = recv $S ;
                  get $S {2} ;
                  $R.commit ;
                  $ch <- F_com_committed[K][a] <- k rng sid $S $Sf2p $Rp2f $R $A ()
    sendmsg,*,* => m = recv $S ;
                 get $S {1} ;
                 $R.recvmsg ;
                 pay {1} K $R ;
                 send $R m ;
                 $ch <- F_com[K][a] <- k rng sid $S $Sf2p $Rp2f $R $A None
    *,sendmsg,* => m = recv $R ;
                 get $R {1} ;
                 $Sf2p.recvmsg ;
                 pay {1} K $Sf2p ;
                 send $Sf2p m ;
                 $ch <- F_com[K][a] <- k rng sid $S $Sf2p $Rp2f $R $A None
    *,*,getleak =>
      if leakbuf then
        $A.yes ; send $A leakbuf ;
        $ch <- F_com[K][a] <- (* args *) None
      else 
        $A.no ;
        $ch <- F_com[K][a] <- (* args *) leakbuf
      end
  )
}


proc F_com_committed[K][a] :
  (k: Int), (rng: [Bit]), (sid: session[1]),
  ($S: sender[a]), ($Sf2p: senderf2p[a]),
  ($Rp2f: receiverp2f[a]),($R: receiver[a]), ($A: adv[a]),
  (leakbuf: a)  |- ($ch: 1) =
{
  case $S, $Rp2f, $A (
    open,*,* => get $S K {0} ;
                $R.open ;
                send $R b ;
                ()
    sendmsg,*,* => m = recv $S ;
                   get $S {1} ;
                   $R.recvmsg ;
                   pay {1} K $R ;
                   send $R m ;
                   $ch <- F_com[K][a] <- (* args *) m ;
    *,sendmsg,* => m = recv $R ;
                   get $R {1} ;
                   $Sf2p.recvmsg ;
                   pay {1} K $Sf2p ;
                   send $Sf2p m ;
    *,*,getleak =>
      if leakbuf then
        $A.yes ; send $A leakbuf ;
        $ch <- F_com[K][a] <- (* args *) None
      else 
        $A.no ;
        $ch <- F_com[K][a] <- (* args *) leakbuf
      end
  )

}

type comp2f[a] = Commit of Bit | Open | Sendmsg of a
type comf2p[a] = Recvmsg of a | Committed | Opened of a
type coma2f = Ok | Deliver 
type comf2a[a] = Sendermsg of a | Receivermsg of a | ACommit | Aopen

type comAandF[a] = Sendermsg of a | Receivermsg of a | Ok | Deliver | ACommit | AOpen 

type senderp2f[a] = Commit of Bit | Open | SendmsgS of a
type senderf2p[a] = RecvmsgS of a
type recvp2f[a] = SendmsgR of a
type recvf2p[a] = Committed | Open of a | RecvmsgR of a

-- the wrapped processes take in generic messages like party wrapper and forward to the functionality
proc wrap_f_init[K][a][p2f,f2p][a2f,f2a]{p2fn,f2pn}{a2fn} :
  (k: Int), (rng: [Bit]), (sid: session[s]),
  ($p2f: P2F[comp2f[a]]{p2fn}), ($f2p: F2P[comf2p[a]]{f2pn}),
  ($a2f: A2F[comAandF[a]])), ($f2a: F2A[1]) |- ($ch: 1) =
{
  $S, $S' <- providerless_channel[K1][senderp2f[a]{p2fn}, committerp2f[a]] <- r rng sid
  $Sf2p, $Sf2p' <- providerless_channel[K1][senderf2p[a]{f2pn}, committerf2p[a]] <- k rng sid
  $Rp2f, $Rp2f' <- providerless_channel[K1][rcvp2f[a]{p2fn}, receiverp2f[a]] <- k rng sid
  $R, $R' <- provideress_channel[K1][recvf2p[a]{f2pn}, receiverf2p[a]] <- k rng sid
  $A, $A' <- providerless_channel[K1][comAandF[a], adv[a]] <- k rng sid

  $f <- F_com[K1][a] <- k rng sid $S $Sf2p $Rp2f $R $A TODO: we want to remove leakbuf 
  $ch <- wrap_f_read[K][a]{p2fn,f2pn}{p2fn,f2pn}{a2fn} <- k rng sid $p2f $f2p $a2f $f2a $S' $Sf2p' $Rp2f' $R' $A'
}

proc wrap_f_read[K][a]{p2fn,f2pn}{a2fn} :
  (k: Int), (rng: [Bit]), (sid: session[s]),
  ($p2f: P2F[comp2f[a]]{p2fn}), ($f2p: F2P[comf2p[a]]{f2pn}),
  ($a2f: A2F[comAandF[a]])), ($f2a: F2A[1]), ($S': sender[a]),
  ($Sf2p': senderf2p[a]), ($Rp2f': receiverp2f[a]), ($R': receiver[a]),
  ($A': adv[a]) |- ($ch: 1) =
{
  get $p2f {p2fn} K
  let P2F(pid, m) = recv $p2f
  case m (
    Commit(b) => withdrawtoken K K1 {2}
                 $S'.Commit ; pay K1 {2} S' ;
                 send $S' b
                 -- move to the outputchecking process
                 $ch <- wrap_f_write[K][a]{p2fn,f2pn}{a2fn} <- k rng sid $p2f $f2p $a2f $f2a $S' $Sf2p' $Rp2f' $R' $A' 
    Open => withdrawtoken K K1 {1}
            $S'.Open ; pay K1 {1} S' ;
            $ch <- wrap_f_write[K][a]{p2fn,f2pn}{a2fn} <- k rng sid $p2f $f2p $a2f $f2a $S' $Sf2p' $Rp2f' $R' $A' 
    SendmsgS(m) => withdrawtoken K K1 {1}
                   $S'.sendmsg ; pay {1} K1 $S'
                   send $S' m
                   $ch <- wrap_f_write[K][a]{p2fn,f2pn}{a2fn} <- k rng sid $p2f $f2p $a2f $f2a $S' $Sf2p' $Rp2f' $R' $A' 
    SendmsgR(m) => withdrawtoken K K1 {1}
                   $R'.sendmsg ; pay {1} K1 $R'
                   send $R' m
                   $ch <- wrap_f_write[K][a]{p2fn,f2pn}{a2fn} <- k rng sid $p2f $f2p $a2f $f2a $S' $Sf2p' $Rp2f' $R' $A' 
  ) 
}

proc wrap_f_write[K][a]{p2fn,f2pn}{a2fn} :
  (k: Int), (rng: [Bit]), (sid: session[s]),
  ($p2f: P2F[comp2f[a]]{p2fn}), ($f2p: F2P[comf2p[a]]{f2pn}),
  ($a2f: A2F[comAandF[a]])), ($f2a: F2A[1]), ($S': sender[a]),
  ($Sf2p': senderf2p[a]), ($Rp2f': receiverp2f[a]), ($R': receiver[a]),
  ($A': adv[a]) |- ($ch: 1) =
{
  (* TODO: make a choice on how to handle PID *)
  match $Sf2p', $R', $A' (
    commiterf2p,,*,* =>
      get K1 {1} $Sp2f' 
      let m = recv $Sp2f'
      $f2p.F2P ; pay K {f2pn} $f2p ;
      send $f2p (spid, ReceivemsgS(m))
      -- go back to reading
      $ch <- wrap_f_read[K]{p2fn,f2pn}{a2fn} <- k rng sid $p2f $f2p $a2f $f2a $S' $Sf2p' $Rp2f' $R' $A'
    *,committed,* =>
      get K1 {0} $R'
      $f2p.F2P ; pay K {f2pn} $f2p ;
      send $f2p (rpid, Committed)
      $ch <- wrap_f_read[K]{p2fn,f2pn}{a2fn} <- k rng sid $p2f $f2p $a2f $f2a $S' $Sf2p' $Rp2f' $R' $A'
    *,opened,* =>
      get K1 {1} $R' ; let b = recv $R' ;
      $f2p.F2P ; pay K {f2pn} $f2p ;
      send $f2p (rpid, Open(b))
      $ch <- wrap_f_read[K]{p2fn,f2pn}{a2fn} <- k rng sid $p2f $f2p $a2f $f2a $S' $Sf2p' $Rp2f' $R' $A'
    *,msg,* =>
      get K1 {1} $R' ; let m = recv $R' ;
      $f2p.F2P ; pay K {f2pn} $f2p ;
      send $f2p (rpid, RecvmsgR(m))
      $ch <- wrap_f_read[K]{p2fn,f2pn}{a2fn} <- k rng sid $p2f $f2p $a2f $f2a $S' $Sf2p' $Rp2f' $R' $A'
    *,*,commit =>
      $f2a.F2A ; send $f2a ACommit ;
      -- automatically wait for an ok
      $ch <- wrap_f_adv[K] <- k rng sig (* ... *)
    *,*,open =>
    *,*,sendermsg =>
    *,* receivermsg =>         
  )
}
