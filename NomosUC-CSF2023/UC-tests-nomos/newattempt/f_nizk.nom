-- TODO: why is there and SID in there for single-proof
stype pandf[prob][wit][p] = +{ prove: PID * prob * wir * &{ proof: PID -> p -> pandf[prob][wit][p]},
							 							   verify: PID * prob * p * &{ verification: PID -> prob -> proof -> Int -> pandf[prob][wit][p]}}

stype aandf[prob][wit][p] = +{ proveA: PID * prob * &{ proofA: p -> aandf[prob][wit][p]},
															 verifyA: prob * p * &{ witness: wit -> aandf[prob][wit][p]}}

stype someRelation = &{ check: prob -> wit -> +{ yes: someRelation,
																								 no: someRelation}}

-- source: https://eprint.iacr.org/2020/1212.pdf page 21
-- TODO: can we make sid a process that returns config information to convey stuff like an NP relation?
type nizksid = 1
proc f_nizk[K][prob][wit][p]: 
	(k: Int), (rng: [Bit]), (sid: SID[nizksid]), ($rel: someRelation),
	($p: pandf[prob][wit][p]), ($a: aandf[prob][wit][p]) |- ($ch: 1) =
{
	case $p (
		prove => pid = recv $p
						 problem = recv $p
						 witness = recv $p
						 $rel.check
						 send $rel problem ; send $rel witness
						 case $rel (
						   yes => $a.proveA
											send $a PID ; send $a prob
											case $a (
												proofA => pf = recv $a ; (* store pf *)
																  $p.proof ; send $p pid
																	send $p pf
											)
               no => -- TODO: understand the no case	
						 )
		verify => pid = recv $p ; prob = recv $p
							proof = recv $p 
							(* check if (x, w, pi) is stored *)
							if !stored then
								$a.verifyA ; send $a pid
								send $a prob ; send $a proof 
								case $a (
									witness => wit = recv $a (* store wit *)
														 $rel.check ; send $rel prob 
														 send $rel wit
														 let r = case $rel (
														   yes => 1
															 no => 0
														 )
														 $p.verification ; send $p pid
														 send $p prob ; send $p proof ; 
														 send $p r
							  )
							else 
						    let wit = getWitness prob proof
								$rel.check ; send $rel prob 
								send $rel wit
								let r = case $rel (
								  yes => 1
								  no => 0
								)
								$p.verification ; send $p pid
							  send $p prob ; send $p proof
								send $p r
	)
} 



