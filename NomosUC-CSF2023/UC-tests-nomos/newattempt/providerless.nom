-- In this example we show a brief of how providerless channels work and what the
-- syntantic sugar evaluates to.  Here, we have a main process `main`, the first
-- process, and we it with P and Q in a triangle topology M talks to both P and Q
-- and P and Q can both talk to each other.  As the first process M makes its
-- channels to P and Q and the channel they will use to commuinicate with each
-- other.
--              M  <-- (the first process)
--            /   \
--           /     \
--          Q ----- P
-- 
-- We since providerless channels are a black box part of the machinery of
-- channels we can assign them 0 cost of execution since we manually insert `tick`
-- messages for accounting for runtime.  We can also wrap them in the sandboxing
-- that we mentioned earlier, but it's just messier code and this seems like a
-- simple enough tradeoff. Normally, even communicators would require some import
-- to do message routing if they are activated a polynomial number of times.

-- the session types
stype pandq[a]{n} = <{n} +{ first: a * &{ second1: a -> third,
                                        second2: a -> third}}
stype third[a]{n} = <{n} +{ fourth: a * pandq[a]{n}}
stype mandp = --...
stype mandq = --...

-- the functional types
type p2q[a] = First of a | Fourth of a
type q2p[a] = Second1 of a | Second2 of a
type m2p = --...
type p2m = --...
type m2q = --... 
type q2m = --... 

-- infinite type that does nothing and is never written to
stype nullsession = +{ donothing: nullsession }

proc main[a]{n}: (k: Int), (rng: [Bit]), (sid: SID[a]) |- ($ch: 1) =
{
  -- spawn process P and process Q and connects to them and connects them together
  $pq2p, $pq2q <- providerless_channel[q2p,p2q,qandp]{q2pn,p2qn} <- k rng sid

  $2mep, $2p <- providerless_channel[m2p,p2m,mandp]{m2pn,p2mn} <- k rng sid
  $pch <- P <- k rng sid $2p $pq2p

  $2meq, $2q <- providerless_channsl[m2q,q2m,mandq]{m2qn,q2mn} <- k rng sid
  $qch <- Q <- k rng sid $2p $pq2q
 
  -- now they are connected to `main` and to each other
  -- start communicating with P or Q
}

-- TODO confirm with ankush this is okay and that the linear channel can change ownership like in the examples given in the Nomos github page
-- providerless_channel syntax sugar
#c <- communicator[pandqf]{pandqn} <- k rng
$2me <- converter[pandqf][p2q]{pandqn} <- #c
$2p <- converter[pandqf][q2p]{pandqn} <- #c

-- TODO: put the nullsession as the tyeps of P and the rest
proc P[a]{n}: (k: Int), (rng: [Bit]), (sid: SUD[s]), ($pandm: pandm), 
($p2q pandq[a]{n}) |- ($ch: 1) =
{
  match $pandm, $p2q (
    -- case match on either $pandm or $p2q and go from there 
  )
}

-- ASSUME: only thing here is taht because of providerless channels Q has the dual of the type that P has
proc Q[a]{n}: (k: Int), (rng: [Bit]), (sid: SID[s]), ($qandm: qandm),
  ($q2p: pandq[a]{n}) |- ($ch: 1) =
{
  match $qandm, $q2p (
    -- do some work
  )
}



-- Sending import over providerless channels: do they need to be virtualized??
-- let's find out
