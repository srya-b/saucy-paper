-- what we want is that the protocol party is the compose function process
-- the compose gets one end of a virtual thannel from partywrapper 
-- it then does what the partywrapper does and spawns the parties in that way
proc compose[K,K1][s]
  (k: Int), (rng: [Bit]), (sid: SID[s]), (pid: PID),
  ($z2ro: z2roS), ($ro2z: ro2zS),
  ($pi2f: pi2fS), ($f2pi: f2piS) |- ($cmp: 1) =
{ 
  $ro2pi4ro, $ro2pi4pi <- channel_init[ro2fS][ro2fF]{ro2fn}
  $pi2ro4ro, $pi2ro4ro <- channel_init[f2roS][f2roF]{f2ron}

  $ro2piz2p <- wrap_p2f_z2p[K][ro2fS][ro2fF]{ro2fn} $ro2pi4pi
  $pi2rof2p <- wrap_p2z_f2p[K][f2roS][f2roF]{f2eon} $pi2ro4ro

  $ro <- protRho[K] <- k rng sid pid $z2ro $ro2z $ro2pi4ro $pi2rof2p
  $pi <- protPi[K] <- k rng sid pid $ro2piz2p $pi2ro4pi $pi2f $f2pi
}


proc compose[K,K1,s][z2rho,rho2z][pi2f,f2pi][rho2f,f2rho]{rho2fn,f2rhon}
  (k: Int), (rng: [Bit]), (sid: SID[s]), (pid: PID),
  (#z2p: comm[K][z2rho]{z2rhon}), (#p2z: comm[K][rho2z]{rho2zn}), (#p2f: comm[K][pi2f]{pi2fn})
  (#f2p: comm[K][f2pi]{f2pin}) |- ($ch: 1) =
{
  #rhop2f <- channel_init[K][rho2f]{rho2fn} ;
  #piz2p <- comp_wrap_z2p[K][rho2f]{rho2fn} <- #rhop2f ;
  #piz2p <- channel_init[K][rho2f]{rho2fn} ;
  #rhof2p <- comp_wrap_p2z[K][rho2f]{rho2fm <- #piz2p ;

  _ <- gen_wrapper_rho[K1] <- k rng sid pid #z2p #p2z #rho2pi #pi2rho ;
  _ <- gen_wrapper_pi[K1] <- k rng sid pid #rho2pi #pi2rho #p2f #f2p ; 
}


proc sim_comp_init[K,J1][s][pi2f,f2pi]
  (k: Int), (rng: [Bit]), (sid: SID[s]),
  ($z2a: Z2A[K][p2f,a2f]), ($a2z: A2Z[K][f2p,f2a]),
  ($p2a: P2A[K][p2f]), ($a2p: A2P[K][A2P]),
  ($f2a: F2A[K][f2a]), ($

(* TODO the init process for sim_comp *)
proc sim_compose_init[K,K1,s][pi2f,f2pi,a2f1][p2f3,f32p][a2f3,f32a]{..} :
  (k: Int), (rng: [Bit]), (sid: SID[s]), (pid: PID),
  ($z_2_a: z2a[K][pi2f,a2f1]), ($a_2_z: a2z[K][f2pi,f12a]),
  ($p_to_a: p2a[K][f32p]), ($a_to_p: a2p[K][p2f3]),
  ($f_to_a: f2a[K][f32a]), ($a_to_f: a2f[K][a2f3]) |- ($ch: 1) =
{
  (* create channels between s_pi and s_rho *)
  #z_to_spi <- channel_init[K1][pi2f,a2f1] <- ;
  #spi_to_z <- channel_init[K1][f2pi,f12a] <- ;
  
  #spi_to_p <- channel_init[K1][pi2f] <- ;
  #spi_to_f <- channel_init[K1][a2f2] <- ;
  #spi_to_srho <- wrap_sim[K1][pi2f,a2f2] <- ;
  #p_to_spi <- channel_init[K1[f2pi,
  #srho_to_spi <- channel_init[K1][f2pi,f22a] <- ; 
  #p_to_spi <- channel_init[K1][
}

proc sim_compose[K,K1,s][pi2f,f2pi,a2f1][p2f3,f32p][a2f3,f32a]{..} :
  (k: Int), (rng: [Bit]), (sid: SID[s]), (pid: PID),
  ($z_2_a: z2a[K][pi2f,a2f1]), ($a_2_z: a2z[K][f2pi,f12a]),
  ($p_to_a: p2a[K][f32p]), ($a_to_p: a2p[K][p2f3]),
  ($f_to_a: f2a[K][f32a]), ($a_to_f: a2f[K][a2f3]),
   |- ($ch: 1) =
{
  match $z_to_a, $p_to_a, $f_to_a (
    Z2A2P,*,* =>
      
    Z2A2F,*,* =>
  )
}

proc comp_wrap_z2p[K][a]{n} :
  (#in2f: comm[K][P2F[a]]) |- (#out2p: comm[K][Z2P[a]]) =
{
  #in2f.RECV ;
  case #in2f (
    yes => 
      get {n} #in2f ;
      P2F(pid, m) = recv #in2f ;
      #out2p.SEND ;
      pay {n} #out2p ;
      send #out2p Z2P(pid, m) ;
      #out2p <- comp_wrap[K][a]{n} <- #in2f ;
    no => 
      #out2p <- comp_wrap[K][a]{n} <- #in2f ;
  )
}

proc comp_wrap_p2z[K][a]{n} :
  (#in2z: comm[K][P2Z[a]]) |- (#out2p: comm[K][F2P[a]]) =
{
  #in2z.RECV ;
  case #in2z (
    yes => 
      get {n} #in2z ;
      P2Z(pid, m) = recv #in2z ;
      #out2p.SEND ;
      pay {n} #out2p ;
      send #out2p F2P(pid, m) ;
      #out2p <- comp_wrap[K][a]{n} <- #in2z ;
    no => 
      #out2p <- comp_wrap[K][a]{n} <- #in2z ;
  )
}

-- match #a, #v (
--  *,casea1 => foo1
--   *,casea2 => foo2
--  caseb1,* => bar1
--  caseb2,* => bar2
-- )
-- 
--      (==)
-- 
-- acquire #a ;
-- #a.RECV ;
-- case #a (
--  yes => m = recv #a ;
--         release #a ;
--         case m (
--           casea1 =>  foo1 ;
--           casea2 => foo2 ;
--         )
--  no => release #a 
-- )
-- acquire #b ;
-- #b.RECV ;
-- case #b (
--  yes => m = recv #b ;
--         release #b ;
--         case m (
--           caseb1 => bar1 ;
--           caseb2 => bar2 ;
--         )
--   no => release #b ;
-- )


proc z2a_wrap[K][a] : 
  (#in2p: comm[K][a]), (#in2f: comm[K][b]), (#out: comm[K][Z2A[a][b]) |- ($ch: 1) =
{
  match #in2p, #in2f (
    *,A2F(m) => #out.SEND ; send #out Z2A2F(m) ;
    A2P(pid,m), * => #out.SEND ; send #out Z2A2P(pid, m) ;
  )
  $ch <- z2a_wrap[K][a] <- #in2p #in2f #out 
}

proc sim_compose[K,K1][z2pi,z2piP,z2piF,z2rho,z2rhoP,z2rhoF,piA2F,piA2P,rhoA2P,rhoA2F]: 
  ... ($z2a: comm[K][z2a]), ($a2z: comm[K][a2z]), ($a2p: comm[K][a2p]),
  ($p2a: comm[K][p2a]), ($f2a: comm[K][f2a]), ($a2f: comm[K][a2f) |- ($ch: 1) =
{
  $z2a' <- channel_init[K1][Z2A[z2piP][z2piF]] ; 
  $a2z' <- channel_init[K1][A2Z[z2rho]] ;
  $a2f' <- channel_init[K1][

  $pi2pfrho <- channel_init[K1][Z2A[z2rhoP][z2rhoF]] ;
  $pi2prho <- channel_init[K1][A2P[z2rhoP]] ;
  $pi2frho <- channel_init[K1][A2F[z2rhoF]] ;
  
  $pfrho2pi <- channel_init[K1][A2Z[rhoP2A][rhoF2A]] ;
  $prho2pi <- channel_init[K1][P2A[rhoP2A]] ;
  $frho2pi <- channel_init[K1][F2A[rhoF2A]] ;

  $ch <- sim_rho <- k rng sid crupt #z2a  
  
}

proc sim_compose[K,K1,s][pi2f,f2pi,a2f1][p2f3,f32p][a2f3,f32a]{..} :
  (k: Int), (rng: [Bit]), (sid: SID[s]), (pid: PID),
  ($z_2_a: z2a[K][pi2f,a2f1]), ($a_2_z: a2z[K][f2pi,f12a]),
  ($p_to_a: p2a[K][f32p]), ($a_to_p: a2p[K][p2f3]),
  ($f_to_a: f2a[K][f32a]), ($a_to_f: a2f[K][a2f3]),
  (* the channels created above *)
   |- ($ch: 1) =
{
  (* the simulator gives Z input to S_pi and output from that to S_rho *)
  match $z_to_a, $p_to_a, $f_to_a (
    (* these are forwarded to s_pi without change *)
    Z2A2P,*,* =>
      pid,m = recv $z_to_a; get {z2an} $z_to_a ;
      withdrawtoken K K1 z2spin ;
      $z2a'.SEND ; send $z2a' Z2A2P(pid,m) ; pay {K1} z2spin $z2a';
      (* go to sim_compose_from_spi *)
    Z2A2F,*,* =>
      m = recv $z_to_a ; get (z2an} $z_to_a ;
      withdrawtoken K K1 z2spi ;
      $z2a'.SEND ; send $z2a' Z2A2F(pid,m) ; pay {K1} z2spin $z2a';
      (* go to sim_compose_from_spi *)
    *,P2A,* => (* this goes to s_rho *)
      pid,m = recv $p_to_a ; get {0} $p_to_a ;
      $p2a'.SEND ; send $p2a' P2A(pid,m) ;
      (* go to sim_compose_from_srho *)
    *,*,F2A => (* identical case *)
  )
  (* now that we activate one of the simulators, case match on their outgoing channels *)
}

(* this process tries to read from s_pi *)
proc sim_compose_from_spi[K,K1,s][...]
  ...
{
  match $pi2prho, $pi2frho, $a2z' (
    *,A2F,* =>
      m = recv $pi2fro ; get {K1} pi2fn ;
      withdrawtoken K K1 z2srhon ;
      $pi2pfrho.Z2A2F; send $pi2pfrho m;
      pay {K1} z2srhon $pi2pfrho;
    A2P,*,* =>
      (pid,m) = recv $pi2prho; get {K1} pi2pn ;
      withdrawtoken K K1 z2srhon ;
      $pi2pfrho.Z2A2P; send $pi2pfrho m; 
      pay {K1} z2srhon $pi2pfrho; 
    *,*,P2A2Z =>
    *,*,F2A2Z =>
  )
}
