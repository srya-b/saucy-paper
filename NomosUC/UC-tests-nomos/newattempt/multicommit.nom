type sender = +{commit : bit ^ s_committed}
type s_committed = +{open : s_opened}
type s_opened = 1
type receiver = &{commit : r_committed}
type r_committed = &{open : bit -> r_opened}
type r_opened = 1
type list[A] = +{cons : A * list[A], nil : 1}
type comm[a] = /\ &{ins : a -> \/ comm[a],
                    del : +{none : \/ comm[a],
                            some : a ^ \/ comm[a]}}
type universal = comm[string]
proc party_wrapper :
  (F : functionality)
  (L1 : list[sid ^ sender]),
  (L2 : list[sid ^ s_committed]),
  (L3 : list[sid ^ s_opened]),
  (L4 : list[sid ^ receiver]),
  (L5 : list[sid ^ r_committed]),
  (L6 : list[sid ^ r_opened]) |- (D : 1) =
  {
    case S (
      commit => s = recv S;   % recv sid
                b = recv S ;  % recv bit (needs to be stored in F_multicom)
                L2' <- append L2 S ;    % adding S to list of committed senders
                (R, L4') <- find_receiver s L4 ;    % what happens if R does not exist?
                R.commit ;
                D <- F_multicom_activate_receiver R L1 L2' L3 L4' L5 L6
    )
  }
proc F_multicom_sender_activated :
  (S : sender),
  (L1 : list[pid ^ sender]),
  (L2 : list[pid ^ s_committed]),
  (L3 : list[pid ^ s_opened]),
  (L4 : list[pid ^ receiver]),
  (L5 : list[pid ^ r_committed]),
  (L6 : list[pid ^ r_opened]) |- (D : 1) =
  {
    case S (
      commit => p = recv S;   % recv pid
                b = recv S ;  % recv bit (needs to be stored in F_multicom)
                L2' <- append L2 S ;    % adding S to list of committed senders
                (R, L4') <- find_receiver p L4 ;    % what happens if R does not exist?
                R.commit ;
                D <- F_multicom_activate_receiver R L1 L2' L3 L4' L5 L6
    )
  }


proc F_multicom_receiver_activated :
  (S : r_committed),
  (L1 : list[pid ^ sender]),
  (L2 : list[pid ^ s_committed]),
  (L3 : list[pid ^ s_opened]),
  (L4 : list[pid ^ receiver]),
  (L5 : list[pid ^ r_committed]),
  (L6 : list[pid ^ r_opened]) |- (D : 1) =
  {
    case S (
      commit => p = recv S;   % recv pid
                b = recv S ;  % recv bit (needs to be stored in F_multicom)
                L2' <- append L2 S ;    % adding S to list of committed senders
                (R, L4') <- find_receiver p L4 ;
                R.commit ;
                D <- F_multicom_activate_receiver R L1 L2' L3 L4' L5 L6
    )
  }
