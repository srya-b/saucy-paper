type sender = +{commit : bit ^ s_committed}
type s_committed = +{open : s_opened}
type s_opened = 1
type receiver = &{commit : r_committed}
type r_committed = &{open : bit -> r_opened}
type r_opened = 1
type list[A] = +{cons : A * list[A], nil : 1}
type comm[a] = /\ &{ins : a -> \/ comm[a],
                    del : +{none : \/ comm[a],
                            some : a ^ \/ comm[a]}}
type universal = comm[string]

type z2p = Commit of Bit | Open ;
type p2z = Committed | Open of Bit ;

(* Assumption: sender already in L1 and receiver already in L4.
   TODO: figure this out *)
(* TODO: input a mapping between party roles and the types they conform to.
	 When the environment, or some other party, inputs a message to a new party
	 can we figure out what type that message belongs to and determine which kind of party it must be?
*)

proc R1_z2p_channel |- ($ch : sender) { } 
proc R2_z2p_channel |- ($ch : sender) { } 

proc party_wrapper_z2p:
  (#z_to_p: comm[pid ^ z2p]), (#p_to_z: comm[pid ^ p2z]),
	(#p_to_f: comm[pid ^ p2f]), (#f_to_p: comm[pid ^ f2p]),
  (R1L1 : list[sid ^ sender]),
  (R1L2 : list[sid ^ s_committed]),
  (R1L3 : list[sid ^ s_opened]),
  (R2L1 : list[sid ^ receiver]),
  (R2L2 : list[sid ^ r_committed]),
  (R2L3 : list[sid ^ r_opened]) |- (D : 1) =
{
  case $z2p (
    Yes =>  
      pid = recv $z2p ;
      msg = recv $z2p ;
      get $z2p K1 z2pn ;
      case msg (
        Commit(b) => 
				(* TODO: Do we even need lists? can't we create parties parameterize them with linear channels with session types then all we have to do it get the channel and write the (function type --> session type) message and proceed? *)	
          if not exists pid $R1L1 $R1L2 $R1L3
          then
						(* spwan all internal channesl p2f, f2p, z2p, p2f, etc. *)
						(* spawn new party process *)
		        $_z2p <- R1_z2p_channel ;
            $R1L1 <- pcons $R1L1 _z2p ;
            $_p2z <and the rest> <-- ... ;
            ...
            (* Spawn waiters for each of these channels *)
            $d <- committer <- sid pid _z2p _p2z ... ; 			  
          end
   
          $_z2p <- find pid $R1L1 $R1L2 $R1L3 ; 
          withdrawTokens f z2pn K KR1 ;
          $_z2p.commit ;
          send b $_z2p ;
          pay b {z2pn} ;
          rm pid $R1L1 ;
          $R1L2 <- pcons $R1L2 $_z2p ;

        Open =>
          $_z2p <- find pid $R1L1 $R1L2 $R1L3 ;  
          withdrawTokens f z2pn K KR1 ;
          $_z2p.open ;
          pay $_z2p {z2pn} ;
          rm pid $R1L2 ;
          $R1L3 <- pcons $R1L3 $_z2p ;
      )
      D <- party_wrapper_p2z <- ... $R1L1 $R1L2 .. ;
    No =>  
      D <- party_wrapper_p2z <- ... ;
  )
}

proc party_wrapper_p2z:
  (#z_to_p: comm[pid ^ z2p]), (#p_to_z: comm[pid ^ p2z]),
	(#p_to_f: comm[pid ^ p2f]), (#f_to_p: comm[pid ^ f2p]),
  (R1L1 : list[sid ^ sender]),
  (R1L2 : list[sid ^ s_committed]),
  (R1L3 : list[sid ^ s_opened]),
  (R2L1 : list[sid ^ receiver]),
  (R2L2 : list[sid ^ r_committed]),
  (R2L3 : list[sid ^ r_opened]) |- (D : 1) =
{


proc createchan[a] : ($ch : a) = { }

proc compose[z2r][r2z][f2r][r2f][p2f][f2p] : 
	(pid: Int),
	($z_to_p: z2p), ($p_to_z: r2z), ($f_to_p: f2r), ($p_to_f: r2f) |- ($D : 1) =
{
	$rho_to_pi <- createchan[p2f];
	$pi_to_rho <- createchan[f2p];

	 <- pi  <-                 $rho_to_pi $pi_to_rho $p_to_f $f_to_p ;
	 <- phi <- $z_to_p $p_to_z $rho_to_pi $pi_to_rho ; 
}

