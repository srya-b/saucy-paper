type k = int
type rng = [Bit] ;
type sid[a] = SID of String ^ a ;
type output_bit = +{b0 : 1, b1 : 1}
type ZtoE[a] = k -> rng -> sid ^ crupt list ^ ZtoA -o PS.PWtoZ[a] -o &{start : output_bit}
type msg[a] = a

(* 
Protocol-specific process code:
type PS.bit = int
type PS.bit_opt = +{some : PS.bit ^ 1, none : 1}
type PS.msg = +{commit : pid ^ PS.bit_opt,
                open : pid ^ PS.bit_opt}
PS.env_code[a] : ($pw : PS.PWtoZ[a]), ($adv : PS.AtoZ) |- ($z : output_bit)
PS.party_code[b] : (id : pid),
                   (#toZ : PS.PtoZ), (#fromZ : PS.ZtoP),
                   (#toA : PS.PtoA), (#fromA : PS.AtoP),
                   (#toF : PS.PtoF), (#fromF : PS.FtoP) |- ($toPW : b)
PS.F_code : (#pw : PS.PWtoF), (#adv : PS.AtoF) |- ($z : PS.FtoZ)
type PS.FtoZ = 1
type PS.PWtoF = /\ +{commit : (pid, bit) ^ &{commit : pid -> \/ PS.PWtoF},
                     open : (pid, bit) -> \/ PS.PWtoF }
type PS.AtoF = ???
  How does F_code know about receiver id?
*)


type list[a] = +{cons : a * list[a],
                 nil : 1}
proc pnil[a] : . |- ($l : list[a]) =
{
  $l.nil ;
  close $l
}

proc asset pcons : ($m : a), ($tl : list[a]) |- ($l : list[a]) =
{
  $l.cons ;
  send $l $m ;
  $l <- $tl
}

proc asset pappend : ($m : a), ($tl : list[a]) |- ($l : list[a]) =
{
  case $tl (
    cons => $x <- recv $tl ;
            $l.cons ;
            send $l $x ;
            $l <- pappend <- $m $tl
  | nil => wait $tl ;
           $l.cons ;
           send $l $m ;
           $l.nil ;
           close $l
  )
}


type PWtoE = k -> rng -> sid -> crupt list -> ?[a]. ?[b]. PWtoZ[a]
type FtoE = k -> rng -> sid -> crupt list -> 1

proc ideal_functionality[f2p][p2f][a2f][f2a]{f2pn}{p2fn}{f2an}{a2fn} : 
	(#f_to_pw: comm[f2p]{f2pn}), (#pw_to_f: comm[p2f]{p2fn}),
	(#f_to_a: comm[f2a]{f2an}), (#a_to_f: comm[a2f]{a2fn})    |- ($f : FtoE) =
{
  k = recv $f ;
  rng = recv $f ;
  sid = recv $f ;
  clist = recv $f ;
  $z <- PS.F_code[f2p][p2f][f2a][a2f]{f2pn}{p2fn}{f2an}{a2fn} <- k rng sid clist #f_to_pw #pw_to_f #f_to_a #a_to_f
}

proc ideal_party[p2f][f2p][z2p][p2z]{p2fn}{f2pn}{z2pn}{p2zn} :
	(s: sid), (p: Int), (k: Int), (rng: [Bit]),
	(#p_to_z: comm[p2z]{p2zn}), (#z_to_p: comm[z2p]{z2pn}),
	(#p_to_f: comm[p2f]{p2fn}), (#f_to_p: comm[f2p]{f2pn})  |- ($ch: 1) =
{
	$z2p <- acquire #z_to_p ;
	$z2p.RECV ;
	case $z2p (
		yes =>	msg = recv $z2p ;
						get $z2p {z2pn} ;
					 	#z_to_p <- release $z2p ;
						$p2f <- acquire #p_to_f ;
						$p2f.SEND ;
						send msg $p2f ;
						pay {f2pn} $p2f ;
						#p_to_f <- release $p2f ;
						$ch <- ideal_party_2[...]{...} <- s p k rng #p_to_z #z_to_p #p_to_f #f_to_p
	 | no => 	$ch <- ideal_party_2[...]{...] <- s p k rng #p_to_z #z_to_p #p_to_f #f_to_p
	)
}

proc ideal_party_2[p2f][f2p][z2p][p2z]{p2fn}{f2pn}{z2pn}{p2zn} :
	(s: sid), (p: Int), (k: Int), (rng: [Bit]),
	(#p_to_z: comm[p2z]{p2zn}), (#z_to_p: comm[z2p]{z2pn}),
	(#p_to_f: comm[p2f]{p2fn}), (#f_to_p: comm[f2p]{f2pn})  |- ($ch: 1) =
{
	$f2p <- acquire #f_to_p ;
	$f2p.RECV ;
	case $f2p (
		yes =>	msg = recv $f2p ;
						get $f2p {f2pn} ;
						#f_to_p <- release $f2p ;
						$p2z <- acquire #p_to_z ;
						$p2z.SEND ;
						send msg $p2z ;
						pay {p2zn} $p2z ;
						#p_to_z <- release $p2z ;
						$ch <- ideal_party[...]{...} <- s p k rng #p_to_z #z_to_p #p_to_f #f_to_p ;
	 | no => 	$ch <- ideal_party[...]{...} <- s p k rng #p_to_z #z_ro_p #p_to_f #f_to_p ;
	)
}

proc adversary[a2f][f2a][z2a][a2z]{a2fn}{f2an}{z2an}{a2zn} :
	(#a_to_f: comm[a2f]

(* type parameters a2p and f2p are USER defined in the module PS and already have an import amount specified. The UC paper dummy adverasry accepts messages of the for (i, (m, id, c, i')) where i is the import sent from the environment, i' is the import to be send to the part (id, c) with message m. Here, i' is encoded in the type a2p and a2f. *)
(* in the UC paper the environment specifies how much import to send along to when dummy adverasry forwards the message. In our case we only care about polynomial bounds and not some kind of resource-constraining where ITMs halt when they've used up their budget. In our case type checking fails because not enough potential was given but still ensures PPT in k*)

type AtoE = k -> rng -> sid -> crupt list -> AtoZ1
type z2d[a2f][a2p] = A2P of pid ^ a2p | A2F of a2f ;
type d2z[f2a][p2a] = P2A2Z of pid ^ p2a | F2A2Z of f2a ;

proc dummy_adversary[z2a][a2z][a2p][p2a][a2f][f2a]
					{z2an}{a2zn}{a2pn}{p2an}{a2fn}{f2an} :
  (#pw_to_adv : comm[p2a]{p2an}), (#adv_to_pw : comm[a2p]{a2pn}),
  (#f_to_adv : comm[f2a]{f2an}), (#adv_to_f : comm[a2f]{a2fn}) |- ($adv : AtoE) =
{
  k = recv $adv ;
  rng = recv $adv ;
  sid = recv $adv ;
  clist = recv $adv ;
  $adv <- dummy_adversary_rec1[z2a][a2z][a2p][p2a][a2f][f2a]
			      {z2an}{a2zn}{a2pn}{p2an}{a2fn}{f2an}
	   			    <- #pw_to_adv #adv_to_pw #f_to_adv #adv_to_f
}

proc dummy_adversary_rec1[z2a][a2z][a2p][p2a][a2f][f2a]
                         {z2an}{a2zn}{a2pn}{p2an}{a2fn}{f2an} :
  (#pw_to_adv : comm[p2a]{p2an}), (#adv_to_pw : comm[a2p]{a2pn}),
  (#f_to_adv : comm[f2a]{f2an}), (#adv_to_f : comm[a2f]{a2fn}) |- ($adv : AtoE) =
{
  $adv <- acquire #z_to_adv ;
  $adv.RECV ;
  case $adv (
	 yes => msg = recv $adv ;
   		   get {z2an} adv ;
   		   genpot {*} T ; 
	 	     #z_to_adv <- release $adv ;
	 	     case msg (
   		     A2P(pid, m) => m = recv $adv ;
   		                    $lf <- acquire #adv_to_pw ;
   		                    $lf.SEND ;
   		                    send $lf m ;
	 						            pay $lf {a2pn} ;
   		                    #adv_to_pw <- release $lf ;
   		                    $adv <- dummy_adversary_rec2[all types]{all potentials} <- #pw_to_adv #adv_to_pw #f_to_adv #adv_to_f
   		 	 | A2F(m) => m = recv $adv ;
   		               $lf <- acquire #adv_to_f ;
   		               $lf.SEND ;
   		               send $lf m ;
	 					 				 pay $lf {a2fn} ;
   		               #adv_to_f <- release $lf ;
   		               $adv <- dummy_adversary_rec2[all types]{all potentials}<- #pw_to_adv #adv_to_pw #f_to_adv #adv_to_f
   		   )
   | no => #z_to_adv <- release $adv ;
		  		 $adv <- dummy_adversary_rec2[all types]{all potentials} <- #pw_to_adv #adv_to_pw #f_to_adv #adv_to_f ;
  )
}

proc dummy_adversary_rec2[z2a][a2z][a2p][p2a][a2f][f2a]
                         {z2an}{a2zn}{a2pn}{p2an}{a2fn}{f2an} :
  (#pw_to_adv : comm[p2a]{p2an}), (#adv_to_pw : comm[a2p]{a2pn}),
  (#f_to_adv : comm[f2a]{f2an}), (#adv_to_f : comm[a2f]{a2fn}) |- ($adv : AtoE) =
{
  $lp <- acquire #pw_to_adv ;
  $lp.RECV ;
  case $lp (
		   msg = recv $lp ;
           get {p2an} $lp ;
           #pw_to_adv <- release $lp ;
		   $adv2z <- acquire #adv_to_z ;
		   $adv2z.SEND ;
		   send A2P2Z msg ; 
		   pay $adv2z {a2zn} ;
		   #adv_to_z <- release $adv2z ;
           $adv <- dummy_adversary_rec3[all types]{all potentials} <- #pw_to_adv #adv_to_pw #f_to_adv #adv_to_f
  | no => #pw_to_adv <- release $lp ;
          $adv <- dummy_adversary_rec3[all types]{all potentials} <- #pw_to_adv #adv_to_pw #f_to_adv #adv_to_f
  )
}

proc dummy_adversary_rec3[z2a][a2z][a2p][p2a][a2f][f2a] :
  (#pw_to_adv : comm[p2a]{p2an}), (#adv_to_pw : comm[a2p]),
  (#f_to_adv : comm[f2a]{f2an}), (#adv_to_f : comm[a2f]{a2fn}) |- ($adv : AtoE) =
{
  $lf <- acquire #f_to_adv ;
  $lp.RECV ;
  case $lp (
    yes => msg = recv $lf ;
           #f_to_adv <- release $lf ;
		   $adv2z <- acquire #adv_to_z ;
		   $adv2z.SEND ;
		   send $adv2z msg ;
		   pay {a2zn} $adv2z ; 
           $adv <- dummy_adversary_rec1[all types]{all potentials} <- #pw_to_adv #adv_to_pw #f_to_adv #adv_to_f
  | no => #f_to_adv <- release $lf ;
          $adv.no_msg_to_z ;
          $adv <- dummy_adversary_rec1[all types]{all potentials} <- #pw_to_adv #adv_to_pw #f_to_adv #adv_to_f
  )
}

proc execUC[K][KA1][KF1] : 
	(k : int), (rng : [Bit]) |- ($d : bit) =
{
		
  (* create/initialize environment *)
  $z <- PS.env PS.z2p PS.p2z PS.z2a PS.a2z <- ;
  send $z k ;
  send $z rng ;

  (* receive sid and crupt list from Z *)
  sid = recv $z ;
  clist = recv $z ;

  (* create a channel connecting PW and ADV *)
  #pw_to_adv <- communicator_init[pid ^ PS.p2a]{PS.p2an} <- pw_id adv_id ;
  #adv_to_pw <- communicator_init[pid ^ PS.a2p]{PS.a2pn} <- adv_id pw_id ;

  (* create a channel connecting PW and F *)
  #pw_to_f <- communicator_init[pid ^ PS.p2f]{PS.p2fn} <- pw_id f_id ;
  #f_to_pw <- communicator_init[pid ^ PS.f2p]{PS.f2pn} <- f_id pw_id ;

  (* create a channel connecting ADV and F *)
  (** TODO: adversary typically doesn't get sent any import from others **)
  #f_to_adv <- communicator_init[PS.f2a]{PS.f2an} <- f_id adv_id ;
  #adv_to_f <- communicator_init[PS.a2f]{PS.a2fn} <- adv_id f_id ;

  (* create a channel connecting PW to Z *)
  #pw_to_z <- communicator_init[pid ^ PS.p2z]{PS.p2zn} <- pw_id z_id ;
  #z_to_pw <- communicator_init[pid ^ PS.z2p]{PS.z2pn} <- z_id pw_id ;

  (* create a channel connecting Z to A *)
  #z_to_a <- communicator_init[PS.z2a]{PS.z2an} <- z_id a_id ;
  #a_to_z <- communicator_init[PS.a2z]{PS.a2zn} <- a_id a_id ;
 
  $pw <- party_wrapper[K][PS.p2z][PS.z2p][PS.p2f][PS.f2p][PS.p2a][PS.a2p] <- 
												  k rng clist  #pw_to_f #f_to_pw #pw_to_a #a_to_pw #pw_to_z #z_to_pw ;
  send $pw k ;
  send $pw rng ;
  send $pw sid ;
  send $pw clist ;
  
  (* initialize ideal functionality *)
  $f_ideal <- PS.Fcode[K][KF1] <- #pw_to_f #f_to_pw #f_to_a #a_to_f ;
  send $f_ideal k ;
  send $f_ideal rng ;
  send $f_ideal sid ;
  send $f_ideal clist ;

  (* initialize ADV *)
  $adv <- adversary[K][KA1] <- #pw_to_a #a_to_pw #z_to_a #a_to_z #f_to_a #a_to_f ;
  send $adv k ;
  send $adv rng ;
  send $adv sid ;
  send $adv clist ;

  (* send channel connecting ADV to execUC to Z *)
  $z.start ;
	pay $z {n} ;
  $d <- $z
}

proc main : . |- ($d : 1) =
{
  let k = ... ;
  let rng = ... ;
  $b1 <- execUC[real_tp] <- k rng $dummy_adversary $hybrid_functionality ;
  $b2 <- execUC[ideal_tp] <- k rng $simulator $ideal_functionality ;
  (* compare b1 and b2 *)
}


type comm[a]{n} = /\ <{n} &{ SEND : a -> |{n}> \/ comm[a]{n},
                     RECV : +{ no : |{0}>  \/ comm[a]{n},
                               yes : a * |{n}> \/ comm[a]{n} }}

proc contract communicator_init[a][K]{n} : (sid : int), (rid : int) |- (#dc : comm[a]) =
{
  $l <- pnil[a] <- ;
  #dc <- communicator_init[a][K]{n} <- sid rid $l
}

proc contract communicator[K][a]{n} : (sid : int), (rid : int), ($l : list[a]) |- (#dc : comm[a]{n}) =
{
  $ldc <- accept #dc ;
  case $ldc (
    SEND => msg <- recv $ldc ;
			      get K $ldc {n} ;
				    genpot {*} T ;
            print ("%d-%d comm acquired by %d: message received\n", sid, rid, sid);
            #dc <- detach $ldc ;
            $lnew <- pappend[a] <- $msg $l ;
            #dc <- communicator[a]{n} <- sid rid $lnew
  | RECV => case $l (
              cons => $m <- recv $l ;
                      $ldc.yes ;
                      print ("%d-%d comm acquired by %d: message delivered\n", sid, rid, rid);
                      send $ldc $m ;
					  					pay K $ldx {n};
                      #dc <- detach $ldc ;
                      #dc <- communicator[a]{n} <- sid rid $l
            | nil => wait $l ;
                     $ldc.no ;
                     print ("%d-%d comm acquired by %d: no message\n", sid, rid, rid);
                     $lnew <- pnil[a] <- ;
                     #dc <- detach $ldc ;
                     #dc <- communicator[a]{n} <- sid rid $lnew
            )
  )
}

(* Composition *)
(* The composition operator takes in as parameteres
		- the original protocol pi and its hybrid functionality F_2
		- the protocol that uses F1 where (pi, F_2) ~ F_1
*)
(* TODO: need to figure out offered type of parties *)
proc compose[z2p][p2z][f2p][p2f][pi2f][f2pi] :
			(pid: Int), 
			(#z_to_p: comm[z2p]), (#p_to_z: comm[p2z]),
			(#f_to_p: comm[f2pi]), (#p_to_f: comm[pi2f])  |- ($p: 1) =
{
	(*
			Z --(z2p)--> rho --(p2f)--> F_1 
	==> Z --(z2p)--> rho --(rho2pi)--> pi --(p2f)--> F_2 
	*)
			
	(* Create channel in between rho and pi
		   In this situation, the interface between pi and who should be the same
		   as between (rho, F_1)
	*)

	#rho_to_pi <- communicator_init[p2f]{p2fn} <- ___ pid ;
	#pi_to_rho <- communicator_init[f2p]{f2pn} <- pid ___ ;

	<- pi  <- pid                    #pi_to_rho #rho_to_pi #p_to_f #f_to_p ;
	$p <- rho <- pid #z_to_p #z_to_p #rho_to_pi #pi_to_rho ;
}
