(* Coin flip *)
stype flipper[K] = +{ init : K -> fflipped } ;
stype fflipped = +{ getflip: &{flip: Bit * 1}}} ;

stype receiver[K] = &{ flipped: K -> rflipped } ;
stype rflipped = +{ getflip: &{ flip: Bit * 1}} ;

proc prot_flip_flipper:
  (k: Int), (rng: [Bit]), (sid: session[1]),
  (pid: Int), (#d: pump), ($z2p: flipper[()]) |- ($p2f: sender) =
{
  case $z2p (
    init =>
			case (recv $z2p) ( () =>
      	b = sample 1 rng ;
      	$p2f.commit ;
      	send $p2f b ;
      	case $p2f (
      	  randomness =>
      	    r = recv $p2f ;
      	    $p2f.open ;
      	    flip = r xor b ;
      	    case $z2p (
      	      getflip =>
      	        $z2p.res ;
      	        send $z2p flip ;
      	    )
      	)	
			)
  )
} 

(* Protocol for receiver doesn't need to do match because ideal functionlity guarantees it won't get getflip before commit *)
proc prot_flip_receiver :
  (k: Int), (rng: [Bit]), (sid: session[1]), (pid: Int),
	(#d: pump), ($z2p: receiver[()])  |- ($p2f: receiver) =
{
	case $p2f (
		commit => 
      r = sample 1 rng ;
      $p2f.randomness ;
      send $p2f r ;
			case $p2f (
				open =>
					b = recv $p2f ;
					flip = b xor r ;
					$d <- acquire #d ;
					$d.dump ;
					#d <- release $d ;
					case $z2p (
						getflip =>
							$z2p.flip ;
							send $z2p flip ;
					)
			)
	)
}

