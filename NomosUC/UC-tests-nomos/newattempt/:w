type comm[a]{n} = /\ <{n} &{ SEND : a -> |{n}> \/ comm[a]{n},
                     RECV : +{ no : |{0}>  \/ comm[a]{n},
                               yes : a * |{n}> \/ comm[a]{n} }}

proc contract communicator_init[a]{n} : (sid : int), (rid : int) |- (#dc : comm[a]) =
{
  $l <- pnil[a] <- ;
  #dc <- communicator_init[a]{n} <- sid rid $l
}

proc contract communicator[K][a]{n} : (sid : int), (rid : int), ($l : list[a]) |- (#dc : comm[a]{n}) =
{
  $ldc <- accept #dc ;
  case $ldc (
    SEND => msg <- recv $ldc ;
			      get $ldc {*} ;
				    genpot {*} T ;
            print ("%d-%d comm acquired by %d: message received\n", sid, rid, sid);
            #dc <- detach $ldc ;
            $lnew <- pappend[a] <- $msg $l ;
            #dc <- communicator[a]{n} <- sid rid $lnew
  | RECV => case $l (
              cons => $m <- recv $l ;
                      $ldc.yes ;
                      print ("%d-%d comm acquired by %d: message delivered\n", sid, rid, rid);
                      send $ldc $m ;
					  					pay $ldx {n};
                      #dc <- detach $ldc ;
                      #dc <- communicator[a]{n} <- sid rid $l
            | nil => wait $l ;
                     $ldc.no ;
                     print ("%d-%d comm acquired by %d: no message\n", sid, rid, rid);
                     $lnew <- pnil[a] <- ;
                     #dc <- detach $ldc ;
                     #dc <- communicator[a]{n} <- sid rid $lnew
            )
  )
}


type p2f = Commit of pid ^ int | Open of pid ^ ?? ;
type SenderMSG[smsg] = ssid ^ smsg ;
type ReceiverMSG[rmsg] = ssid ^ rmsg ;
type f2rMSG[f2rmsg] = f2rmsg ;
type f2sMSG[f2smsg] = f2smsg ;
type PID = int ^ int ;

(* For importa accross processes, each list element is a process and assign some potential to each process nd consume it when a read happens with 0 import *)

(* proc asset multi_session[f]: (#p_to_f: comm[MSG]) ... ($lf : list[f]) |- ($ms: ...) = *)
proc bangF_1[f][p2f][f2p][a2f][f2a][K][K1]{p2fn}{f2pn} : 
	(#pw_to_f: comm[pid ^ ssid ^ p2f]), (#f_to_pw: comm[ssid ^ pid ^ f2p]),
	(#a_to_f: comm[ssid ^ a2f]), (#f_to_a: comm[ssd ^ f2a]),
	($lf: list[f])  |- ($ms: 1) =
{
	$p2f <- acquire: #pw_to_f ;
	$p2f.RECV ;
	case $p2f (
		yes => pid = recv $p2f ;
					 ssid = recv $p2f ;
					 msg = recv $p2f ;
					 get K $p2f {p2fn} ;
					 #pw_to_f <- release $p2f ;
					 genpot K {*} ;			(* can genpot generate 0 potential if I already have enough? *)
					
					 exists = find_f ssid $lf ;
					 if not exists
					 then
					   #toP <- communicator_init[pid ^ f2p][K1]{f2pn} <- ... ... ;
						 <- translate <- ssid #toP #f_to_pw ;
						 #fromP <- communicator_init[pid ^ p2f][K1]{p2fn} <- ... ... ;
						 #toA <- communicator_init[f2a][K1]{f2an} <- ... ... ;
						 <- translate[K] <- ssid #toA #f_to_a ;
					 	 #fromA <- communicator_init[a2f][K1]{a2fn} <- ... ... ;
						 $fnew <- PS.F_code[K1] <- ssid #toP #fromP #toA #fromA ;
						 $lf' <- pcons <- $fnew $lf ;
				   end
					 #bang_to_f <- get_chan <- ssid $lf ;
					 $b2f <- acquire #bang_to_f ;
					 withdrawtoken K p2fn K1 ; 
					 $b2f.SEND ;
					 send $b2f pid^msg ;
					 pay K1 {p2fn} $b2f ;
					 (*simulate $b2f ;*)
					 #bang_to_f <- release $b2f ;
					 $ms <- bangF_2[f][p2f][f2p][a2f][f2a]{p2fn}{f2pn}{a2fn}{f2an} <- ... $lf' ;
	)
}

proc bangF_2[f][p2f][f2p][a2f][f2a][K]{p2fn}{f2pn}{a2fn}{f2an} :
	(#pw_to_f: comm[pid ^ ssid ^ p2f]), (#f_to_pw: comm[pid ^ ssid ^ f2p]),
	(#a_to_f: comm[ssid ^ a2f]), (#f_to_a: comm[ssd ^ f2a]),
	($lf: list[f])  |- ($ms: ??) =
{
	$a2f <- acquire #a_to_f ;
	$a2f.RECV ;
	case $a2f (
		yes => ssid = recv $a2f ;
					 msg = recv $a2f ;
					 get K $a2f {a2fn} ;
					 #a_to_f <- release $a2f ;
					 genpot {*} T ;
		
					 exists = find_f ssid $lf ;
					 if not exists
					 then
					   #toP <- communicator_init[pid ^ f2p]{f2pn} <- ... ... ;
						 <- translate <- ssid #toP #f_to_pw ;
						 #fromP <- communicator_init[pid ^ p2f]{p2fn} <- ... ... ;
						 #toA <- communicator_init[f2a]{f2an} <- ... ... ;
						 <- translate <- ssid #toA #f_to_a ;
					 	 #fromA <- communicator_init[a2f]{a2fn} <- ... ... ;
						 $fnew <- PS.F_code <- ssid #toP #fromP #toA #fromA ;
						 $lf' <- pcons <- $fnew $lf ;
				   end
					 #bang_to_fa <- get_chan <- ssid $lf ; (* TODO get the right channel *)
					 $b2fa <- acquire #bang_to_fa ;
					 withdrawtoken K p2fn K1 ;
					 $b2fa.SEND ;
					 send $b2fa msg ;
					 pay K1 {f2an} $b2fa ;
					 (*simulate $b2fa ;*)
					 #bang_to_fa <- release $b2fa ;
					 $ms <- bangF_1[f][p2f][f2p][a2f][f2a]{p2fn}{f2pn}{a2fn}{f2an} <- ... $lf' ;
	)
}

(* TODO: how to treat the bangF: sim or no sim? *)
proc bangF_translate[a]{an} :
	(id: ssid), (#to_inner: comm[a]{an}), (#to_outter: comm[ssid ^ a]{an}) |- ($t: 1) =
{
	$ti <- acquire #to_inner ;
	$ti.RECV ;
	case $ti (
		yes => msg = recv $ti ;
					 get K1 {f2pn} $ti ;  (* TODO: sim get? *)
					 #to_inner <- release $ti ;
					 $to <- acquire #to_outter ;
					 send $to ssid ^ msg ;
					 pay K {f2pn} $to ;
					 #to_outter <- release $to ;
					 $t <- bangF_translate ssid #to_inner #to_outer ;
	 | no => #to_inner <- release $ti ;
					 $t <- bangF_translate ssid #to_inner #to_outer ;
	)
}

proc bangP_1[p][p2z][z2p][p2f][f2p]{p2zn}{z2pn}{p2fn}{f2pn} :
	(#z_to_p: comm[pid ^ z2p]{z2pn}), (#p_to_z: comm[pid ^ p2z]{p2zn}),
	(#f_to_p: comm[pid ^ f2p]{f2pn}), (#p_to_f: comm[pid ^ p2f]{p2fn}),
	($lp: list[p])  |- ($ms:??) =
{
	$z2p <- acquire #z_to_p ;
	$z2p.RECV ;
	case $z2p (
		yes => ssid = recv $z2p ;
					 msg = recv $z2p ;
					 get {z2pn} $z2p ;
					 genpot {*} T ;
					 
					 exists = find_p ssid $lp ;
					 if not exists
					 then
					   #toF <- communicator_init[pid ^ p2f]{p2fn} <- ... ... ;
						 <- bangp_translate <- ssid #toF #p_to_f ;
						 #fromF <- communicator_init[pid ^ f2p]{f2pn} <- ... ... ;
						 #toA <- communicator_init[p2a]{p2an} <- ... ... ;
						 <- bangp_translate <- ssid #toA #p_to_a ;
					 	 #fromA <- communicator_init[a2p]{a2pn} <- ... ... ;
						 $fnew <- PS.F_code <- ssid #toF #fromF #toA #fromA ;
						 $lp' <- pcons <- $fnew $lp ;
				   end
					 #bang_to_p <- get_chan <- ssid $lp ;
					 $b2p <- acquire #bang_to_p ;
					 $b2p.SEND ;
					 send $b2p msg ;
					 simpay {z2pn} $b2p ;
					 simulate $b2p ;
					 #bang_to_p <- release $b2p ;
					 $ms <- bangP_2[p][p2f][f2p][z2p][p2z]{p2fn}{f2pn}{z2pn}{p2zn} <- ... $lf' ;
					    
	)
}

proc bangP_2[.. same ..] =
 (..),...,(...) same = 
{
	(* Literally same code as above but for f2p channel *)
}

proc squash_1[a][z2p][p2z][f2p][p2f] :
	(k: int), (rng: [Bit]), (s: sid[a]), (p: Int),
	(#p_to_z: comm[z2p]), (#z_to_p: comm[p2z]),
	(#p_to_f: comm[p2f]), (#f_to_p: comm[p2f])  |- ($ch: 1) =
{
	$z2p <- acquire #z_to_p ;
	$z2p.RECV ;
	case $z2p (
		yes => ssid = recv $z2p ;
					 sssid = recv $z2p ;
					 m = recv $z2p ;
					 get $z2p {z2pn} ;
					 #z_to_p <- release $z2p ;
					 $p2f <- acquire #p_to_f ;
					 $p2f.SEND ;
					 send SID( ssid, fst sssid)		(* TODO: how to get this as a string *)					 
					 send (snd sssid) $p2f ;
					 send m $p2f ;
					 pay {*} $p2f ;
					 #p_to_f <- release $p2f ;
					 $ch <- squash_2[a][z2p][p2z][f2p][p2f] <- k rng s #p_to_z #z_to_p #p_to_f #f_to_p
	 | no => $ch <- squash_2[a][z2p][p2z][f2p][p2f] <- k rng s #p_to_z #z_to_p #p_to_f #f_to_p
	)	
}

proc squash_2[z2p][p2z][f2p][p2f] :
	(k: int), (rng: [Bit]), (s: sid[a]), (p: Int),
	(#p_to_z: comm[z2p]), (#z_to_p: comm[p2z]),
	(#p_to_f: comm[p2f]), (#f_to_p: comm[p2f])  |- ($ch: 1) =
{
	$f2p <- acquire #f_to_p ;
	$f2p.RECV ;
	case $f2p (
		yes => ssid <- recv $f2p ;
					 msg = recv $f2p ;
					 get {f2pn} $fwp ;
					 #f_to_p <- release $f2p ;
					 let sndssid = snd s ;
					 let  

					 (* TODO: string operations *)
	)
}	

proc squashS[



(* proc asset multi_session1{s2fn}{r2fn}{f2sn}{f2rn}: (#sender2f: comm[SenderMSG]{s2fn}), (#receiver2f: comm[ReceiverMSG]{r2fn}), (#f2s: comm[f2sMSG]), (#f2r: com[f2wMSG]) |- ($ms: ...) =
{
	$s2f <- acquire #s_to_f ;
	ssid = recv $s2f ;
	msg = recv $s2f ;
	get {s2fn} $s2f ;

	(** n = recv $p2f ; **)

	exists = find_f ssid ;
	if exists 
	then
		#sender2f <- release $s2f ;
		$lfnew <- send_msg ssid msg $lf ;
		$ms <- multi_session2[f]{s2fn}{r2fn}{f2sn}{f2rn} <- .... $lfnew ;
	else
		#sender2f <- release $s2f ;
		
		(** spawn communicators with type p2f instead of MSG **)
		
		$lfnew  <- f <- ssid  << input communicators >> 
		$lf' <- pcons $lfnew $lf ;
		$lf < -send_msg ssid msg $lf' ;
		$ms <- multi_session2[f]{s2fn}{r2fn}{f2sn}{f2rn} <- ... $lf ;
	)
}

proc asset multi_session2[f]{s2fn}{r2fn}{f2sn}{f2rn}: (#sender2f: comm[SenderMSG]{s2fn}), (#receiver2f: comm[ReceiverMSG]{r2fn}), (#f2s: comm[f2sMSG]), (#f2r: com[f2wMSG]) |- ($ms: ...) =
{
	$r2f <- acquire #r_to_f ;
	ssid = recv $r2f ;
	msg = recv $r2f ;
	get {s2fn} $r2f ;

	exists = find_f ssid ;
	if exists 
	then
		#receiver2f <- release $r2f ;
		$lfnew <- send_msg ssid msg $lf ;
		$ms <- multi_session3[f]{s2fn}{r2fn}{f2sn}{f2rn} <- .... $lfnew ;
	else
		#receiver2f <- release $r2f ;
		
		(** spawn communicators with type p2f instead of MSG **)
		
		$lfnew  <- f <- ssid  << input communicators >> 
		$lf' <- pcons $lfnew $lf ;
		$lf < -send_msg ssid msg $lf' ;
		$ms <- multi_session3[f]{s2fn}{r2fn}{f2sn}{f2rn} <- ... $lf ;
	)
}


proc asset multi_session3[f]{s2fn}{r2fn}{f2sn}{f2rn}: (#sender2f: comm[SenderMSG]{s2fn}), (#receiver2f: comm[ReceiverMSG]{r2fn}), (#f2s: comm[f2sMSG]), (#f2r: com[f2wMSG]) |- ($ms: ...) =
{
	$f2s <- acquire #f2s; 
	msg = recv $f2s ;
	get {f2sn} ;
	#f2s <- release $f2s ;

	$	

}
*)
