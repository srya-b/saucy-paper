stype flipper[K] = +{ init : K -> flipped } ;
stype fflipped = +{ getflip: &{ flip: Bit * 1,
																noflip: fflipped }} ;

(*stype receiver[K] = &{ flipped: K -> rflipped } ;
stype rflipped = +{ getflip: &{ flip: Bit * 1} ;*)
stype receiver[K] = +{ getflip: &{ flip: K -> Bit -> 1 ,
																	 noflip: receiver[K] }} ;

stype adv[K] = +{ flipped: K -> deliver } ;
stype deliver = +{ askflip: &{ yes: deliver,
															 no: deliver }}

type flipp2f = Init | GetFlip | Recv ;
type flipf2p = Flip of Bit ;

type flipa2f = 1 ;
type flipf2a = Flip ;

proc F_coinflip[K] :
	(k: Int), (rng: [Bit]), (sid: session[1]),
	($F: flipper[K]), ($R: receiver[K]) |- ($ch: 1) =
{
	case $F (
		init =>
			x = recv $F ;
			b = sample 1 rng ;
			$A.flipped ; 
			send $R x ;
			$f <- F_coinflip_flipper <- b $F ;
			$r <- F_coinflip_receiver[K] <- b x $R ;
}

proc F_coinflip_flipper:
	(b: Bit), ($F: fflipped) |- ($f: 1) =
{
	case $F ( getflip => $F.flip ; send $F b ; ) 
	case $F (
		getflip =>
			$A.askflip ;
			case $A (
				yes =>
					$F.flip ;
					se	nd $F b ;
						
}

proc F_coinflip_receiver[K] :
	(b: Bit), (x: K), ($R: receiver[K]) |- ($r: 1) =
{
	case $R ( getflip => $R.flip ; send $F x ; send $F b ; )
} 

